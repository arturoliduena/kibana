{"content_title":"Vector tile search API","content_body":{"text":"## Vector tile search API\n\nSearches a vector tile for geospatial values. Returns results as a binary [Mapbox vector tile](https://docs.mapbox.com/vector-tiles/specification).\n\n```\nresp = client.search_mvt(\n    index=\"my-index\",\n    field=\"my-geo-field\",\n    zoom=\"15\",\n    x=\"5271\",\n    y=\"12710\",\n)\nprint(resp)\n```\n\n```\nconst response = await client.searchMvt({\n  index: \"my-index\",\n  field: \"my-geo-field\",\n  zoom: 15,\n  x: 5271,\n  y: 12710,\n});\nconsole.log(response);\n```\n\n```\nGET my-index/_mvt/my-geo-field/15/5271/12710\n```\n\n### Request\n\n`GET <target>/_mvt/<field>/<zoom>/<x>/<y>`\n\n`POST <target>/_mvt/<field>/<zoom>/<x>/<y>`\n\n### Prerequisites\n\n* Before using this API, you should be familiar with the [Mapbox vector tile specification](https://github.com/mapbox/vector-tile-spec).\n* If the Elasticsearch security features are enabled, you must have the `read` [index privilege](security-privileges.html#privileges-list-indices \"Indices privileges\") for the target data stream, index, or alias. For cross-cluster search, see [*Remote clusters*](remote-clusters.html \"Remote clusters\").\n\n### Path parameters\n\n* `<target>`\n\n  (Required, string) Comma-separated list of data streams, indices, or aliases to search. Supports wildcards (`*`). To search all data streams and indices, omit this parameter or use `*` or `_all`.\n\n  To search a remote cluster, use the `<cluster>:<target>` syntax. See [*Search across clusters*](modules-cross-cluster-search.html \"Search across clusters\").\n\n* `<field>`\n\n  (Required, string) Field containing geospatial values to return. Must be a [`geo_point`](geo-point.html \"Geopoint field type\") or [`geo_shape`](geo-shape.html \"Geoshape field type\") field. The field must have [doc values](doc-values.html \"doc_values\") enabled. Cannot be a nested field.\n\n  Vector tiles do not natively support geometry collections. For `geometrycollection` values in a `geo_shape` field, the API returns a `hits` layer feature for each element of the collection. This behavior may change in a future release.\n\n* `<zoom>`\n\n  (Required, integer) Zoom level for the vector tile to search. Accepts `0`-`29`.\n\n* `<x>`\n\n  (Required, integer) X coordinate for the vector tile to search.\n\n* `<y>`\n\n  (Required, integer) Y coordinate for the vector tile to search.\n\n### Description\n\nInternally, Elasticsearch translates a vector tile search API request into a [search](search-search.html \"Search API\") containing:\n\n* A [`geo_bounding_box`](query-dsl-geo-bounding-box-query.html \"Geo-bounding box query\") query on the `<field>`. The query uses the `<zoom>/<x>/<y>` tile as a bounding box.\n* A [`geotile_grid`](search-aggregations-bucket-geotilegrid-aggregation.html \"Geotile grid aggregation\") or [`geohex_grid`](search-aggregations-bucket-geohexgrid-aggregation.html \"Geohex grid aggregation\") aggregation on the `<field>`. The `grid_agg` parameter determines the aggregation type. The aggregation uses the `<zoom>/<x>/<y>` tile as a bounding box.\n* Optionally, a [`geo_bounds`](search-aggregations-metrics-geobounds-aggregation.html \"Geo-bounds aggregation\") aggregation on the `<field>`. The search only includes this aggregation if the `exact_bounds` parameter is `true`.\n* If the optional parameter `with_labels` is true, the internal search will include a dynamic runtime field that calls the `getLabelPosition` function of the geometry doc value. This enables the generation of new point features containing suggested geometry labels, so that, for example, multi-polygons will have only one label.\n\nFor example, Elasticsearch may translate a vector tile search API request with a `grid_agg` argument of `geotile` and an `exact_bounds` argument of `true` into the following search:\n\n```\nresp = client.search(\n    index=\"my-index\",\n    size=10000,\n    query={\n        \"geo_bounding_box\": {\n            \"my-geo-field\": {\n                \"top_left\": {\n                    \"lat\": -40.979898069620134,\n                    \"lon\": -45\n                },\n                \"bottom_right\": {\n                    \"lat\": -66.51326044311186,\n                    \"lon\": 0\n                }\n            }\n        }\n    },\n    aggregations={\n        \"grid\": {\n            \"geotile_grid\": {\n                \"field\": \"my-geo-field\",\n                \"precision\": 11,\n                \"size\": 65536,\n                \"bounds\": {\n                    \"top_left\": {\n                        \"lat\": -40.979898069620134,\n                        \"lon\": -45\n                    },\n                    \"bottom_right\": {\n                        \"lat\": -66.51326044311186,\n                        \"lon\": 0\n                    }\n                }\n            }\n        },\n        \"bounds\": {\n            \"geo_bounds\": {\n                \"field\": \"my-geo-field\",\n                \"wrap_longitude\": False\n            }\n        }\n    },\n)\nprint(resp)\n```\n\n```\nconst response = await client.search({\n  index: \"my-index\",\n  size: 10000,\n  query: {\n    geo_bounding_box: {\n      \"my-geo-field\": {\n        top_left: {\n          lat: -40.979898069620134,\n          lon: -45,\n        },\n        bottom_right: {\n          lat: -66.51326044311186,\n          lon: 0,\n        },\n      },\n    },\n  },\n  aggregations: {\n    grid: {\n      geotile_grid: {\n        field: \"my-geo-field\",\n        precision: 11,\n        size: 65536,\n        bounds: {\n          top_left: {\n            lat: -40.979898069620134,\n            lon: -45,\n          },\n          bottom_right: {\n            lat: -66.51326044311186,\n            lon: 0,\n          },\n        },\n      },\n    },\n    bounds: {\n      geo_bounds: {\n        field: \"my-geo-field\",\n        wrap_longitude: false,\n      },\n    },\n  },\n});\nconsole.log(response);\n```\n\n```\nGET my-index/_search\n{\n  \"size\": 10000,\n  \"query\": {\n    \"geo_bounding_box\": {\n      \"my-geo-field\": {\n        \"top_left\": {\n          \"lat\": -40.979898069620134,\n          \"lon\": -45\n        },\n        \"bottom_right\": {\n          \"lat\": -66.51326044311186,\n          \"lon\": 0\n        }\n      }\n    }\n  },\n  \"aggregations\": {\n    \"grid\": {\n      \"geotile_grid\": {\n        \"field\": \"my-geo-field\",\n        \"precision\": 11,\n        \"size\": 65536,\n        \"bounds\": {\n          \"top_left\": {\n            \"lat\": -40.979898069620134,\n            \"lon\": -45\n          },\n          \"bottom_right\": {\n            \"lat\": -66.51326044311186,\n            \"lon\": 0\n          }\n        }\n      }\n    },\n    \"bounds\": {\n      \"geo_bounds\": {\n        \"field\": \"my-geo-field\",\n        \"wrap_longitude\": false\n      }\n    }\n  }\n}\n```\n\nThe API returns results as a binary [Mapbox vector tile](https://github.com/mapbox/vector-tile-spec). Mapbox vector tiles are encoded as [Google Protobufs (PBF)](https://github.com/protocolbuffers/protobuf). By default, the tile contains three layers:\n\n* A `hits` layer containing a feature for each `<field>` value matching the `geo_bounding_box` query.\n\n* An `aggs` layer containing a feature for each cell of the `geotile_grid` or `geohex_grid`. The layer only contains features for cells with matching data.\n\n* A `meta` layer containing:\n\n  * A feature containing a bounding box. By default, this is the bounding box of the tile.\n  * Value ranges for any sub-aggregations on the `geotile_grid` or `geohex_grid`.\n  * Metadata for the search.\n\nThe API only returns features that can display at its zoom level. For example, if a polygon feature has no area at its zoom level, the API omits it.\n\nThe API returns errors as UTF-8 encoded JSON.\n\n### Query parameters\n\nYou can specify several options for this API as either a query parameter or request body parameter. If you specify both parameters, the query parameter takes precedence.\n\n* `exact_bounds`\n\n  (Optional, Boolean) If `false`, the `meta` layer’s feature is the bounding box of the tile. Defaults to `false`.\n\n  If `true`, the `meta` layer’s feature is a bounding box resulting from a [`geo_bounds`](search-a average density of tile bins at each zoom level. Elasticsearch uses the H3 resolution that is closest to the corresponding `geotile` density.\n\n- `grid_type`\n\n  (Optional, string) Determines the geometry type for features in the `aggs` layer. In the `aggs` layer, each feature represents a cell in the grid.\n\n  Valid values for `grid_type`\n\n  * `grid` (Default)\n\n    Each feature is a `Polygon` of the cell’s geometry. For a `grid_agg` of `geotile`, the feature is the cell’s bounding box. For a `grid_agg` of `geohex`, the feature is the hexagonal cell’s boundaries.\n\n  * `point`\n\n    Each feature is a `Point` that’s the centroid of the cell.\n\n  * `centroid`\n\n    Each feature is a `Point` that’s the centroid of the data within the cell. For complex geometries, the actual centroid may be outside the cell. In these cases, the feature is set to the closest point to the centroid inside the cell.\n\n* `size`\n\n  (Optional, integer) Maximum number of features to return in the `hits` layer. Accepts `0`-`10000`. Defaults to `10000`. If `0`, results don’t include the `hits` layer.\n\n- `track_total_hits`\n\n  (Optional, integer or Boolean) Number of hits matching the query to count accurately. Defaults to `10000`.\n\n  If `true`, the exact number of hits is returned at the cost of some performance. If `false`, the response does not include the total number of hits matching the query.\n\n* `with_labels`\n\n  (Optional, Boolean) If true, the hits and aggs layers will contain additional point features representing suggested label positions for the original features.\n\n  * `Point` and `MultiPoint` features will have one of the points selected.\n  * `Polygon` and `MultiPolygon` features will have a single point generated, either the centroid, if it is within the polygon, or another point within the polygon selected from the [sorted triangle-tree](geo-shape.html#geoshape-indexing-approach \"Indexing approach\").\n  * `LineString` features will likewise provide a roughly central point selected from the [triangle-tree](geo-shape.html#geoshape-indexing-approach \"Indexing approach\").\n  * The aggregation results will provide one central point for each aggregation bucket.\n\n  All attributes from the original features will also be copied to the new label features. In addition, the new features will be distinguishable using the tag `_mvt_label_position`.\n\n### Request body\n\n* `aggs`\n\n  (Optional, [aggregation object](search-aggregations.html \"Aggregations\")) [Sub-aggregations](search-aggregations.html#run-sub-aggs \"Run sub-aggregations\") for the `grid_agg`. Supports the following aggregation types:\n\n  * [`avg`](search-aggregations-metrics-avg-aggregation.html \"Avg aggregation\")\n\n  * [`boxplot`](search-aggregations-metrics-boxplot-aggregation.html \"Boxplot aggregation\")\n\n  * [`cardinality`](search-aggregations-metrics-cardinality-aggregation.html \"Cardinality aggregation\")\n\n  * [`extended stats`](search-aggregations-metrics-extendedstats-aggregation.html \"Extended stats aggregation\")\n\n  * [`max`](search-aggregations-metrics-max-aggregation.html \"Max aggregation\")\n\n  * [`median absolute deviation`](search-aggregations-metrics-median-absolute-deviation-aggregation.html \"Median absolute deviation aggregation\")\n\n  * [`min`](search-aggregations-metrics-min-aggregation.html \"Min aggregation\")\n\n  * [`percentile`](search-aggregations-metrics-percentile-aggregation.html \"Percentiles aggregation\")\n\n  * [`percentile-rank`](search-aggregations-metrics-percentile-rank-aggregation.html \"Percentile ranks aggregation\")\n\n  * [`stats`](search-aggregations-metrics-stats-aggregation.html \"Stats aggregation\")\n\n  * [`sum`](search-aggregations-metrics-sum-aggregation.html \"Sum aggregation\")\n\n  * [`value count`](search-aggregations-metrics-valuecount-aggregation.html \"Value count aggregation\")\n\n    The aggregation names can’t start with `_mvt_`. The `_mvt_` prefix is reserved for internal aggregations.\n\n* `exact_bounds`\n\n  (Optional, Boolean) If `false`, the `meta` layer’s feature is the bounding box of the tile. Defaults to `false`.\n\n  If `true`, the `meta` layer’s feature is a bounding box resulting from a [`geo_bounds`](search-aggregations-metrics-geobounds-aggregation.html \"Geo-bounds aggregation\") aggregation. The aggregation runs on `<field>` values that intersect the `<zoom>/<x>/<y>` tile with `wrap_longitude` set to `false`. The resulting bounding box may be larger than the vector tile.\n\n* `extent`\n\n  (Optional, integer) Size, in pixels, of a side of the tile. Vector tiles are square with equal sides. Defaults to `4096`.\n\n* `buffer`\n\n  (Optional, integer) Size, in pixels, of a clipping buffer outside the tile. This allows renderers to avoid outline artifacts from geometries that extend past the extent of the tile. Defaults to `5`.\n\n* `fields`\n\n  (Optional, array of strings and objects) Fields to return in the `hits` layer. Supports wildcards (`*`).\n\n  This parameter does not support fields with [array values](array.html \"Arrays\"). Fields with array values may return inconsistent results.\n\n  You can specify fields in the array as a string or object.\n\n  Properties of `fields` objects\n\n  * `field`\n\n    (Required, string) Field to return. Supports wildcards (`*`).\n\n  * `format`\n\n    (Optional, string) Format for date and geospatial fields. Other field data types do not support this parameter.\n\n    [`date`](date.html \"Date field type\") and [`date_nanos`](date_nanos.html \"Date nanoseconds field type\") fields accept a [date format](mapping-date-format.html \"format\"). [`geo_point`](geo-point.html \"Geopoint field type\") and [`geo_shape`](geo-shape.html \"Geoshape field type\") fields accept:\n\n    * `geojson` (default)\n\n      [GeoJSON](http://www.geojson.org)\n\n    * `wkt`\n\n      [Well Known Text](https://en.wikipedia.org/wiki/Well-known_text_representation_of_geometry)\n\n    * `mvt(<spec>)`\n\n      Binary [Mapbox vector tile](https://docs.mapbox.com/vector-tiles/specification). The API returns the tile as a base64-encoded string. The `<spec>` has the format `<zoom>/<x>/<y>` with two optional suffixes: `@<extent>` and/or `:<buffer>`. For example, `2/0/1` or `2/0/1@4096:5`.\n\n      `mvt` parameters\n\n      * `<zoom>`\n\n        (Required, integer) Zoom level for the tile. Accepts `0`-`29`.\n\n      * `<x>`\n\n        (Required, integer) X coordinate for the tile.\n\n      * `<y>`\n\n        (Required, integer) Y coordinate for the tile.\n\n      * `<extent>`\n\n        (Optional, integer) Size, in pixels, of a side of the tile. Vector tiles are square with equal sides. Defaults to `4096`.\n\n      * `<buffer>`\n\n        (Optional, integer) Size, in pixels, of a clipping buffer outside the tile. This allows renderers to avoid outline artifacts from geometries that extend past the extent of the tile. Defaults to `5`.\n\n* `grid_agg`\n\n  (Optional, string) Aggregation used to create a grid for the `<field>`.\n\n  Valid values for `grid_agg`\n\n  * `geotile` (Default)\n\n    [`geotile_grid`](search-aggregations-bucket-geotilegrid-aggregation.html \"Geotile grid aggregation\") aggregation.\n\n  * `geohex`\n\n    [`geohex_grid`](search-aggregations-bucket-geohexgrid-aggregation.html \"Geohex grid aggregation\") aggregation.\n\n* `grid_precision`\n\n  (Optional, integer) Precision level for cells in the `grid_agg`. Accepts `0`-`8`. Defaults to `8`. If `0`, results don’t include the `aggs` layer.\n\n  Grid precision for `geotile`\n\n  For a `grid_agg` of `geotile`, you can use cells in the `aggs` layer as tiles for lower zoom levels. `grid_precision` represents the additional zoom levels available through these cells. The final precision is computed by as follows:\n\n  `<zoom> + grid_precision`\n\n  For example, if `<zoom>` is `7` and `grid_precision` is `8`, then the `geotile_grid` aggregation will use a precision of `15`. The maximum final precision is `29`.\n\n  The `grid_precision` also determines the number of cells for the grid as follows:\n\n  `(2^grid_precision) x (2^grid_precision)`\n\n  For example, a value of `8` divides the tile into a grid of 256 x 256 cells. The `aggs` layer only contains features for cells with matching data.\n\n  Grid precision for `geohex`\n\n  For a `grid_agg` of `geohex`, Elasticsearch uses `<zoom>` and `grid_precision` to calculate a final precision as follows:\n\n  `<zoom> + grid_precision`\n\n  This precision determines the [H3 resolution of the hexagonal cells](https://h3geo.org/docs/core-library/restable) produced by the `geohex` aggregation. The following table maps the H3 resolution for each precision.\n\n  For example, if `<zoom>` is `3` and `grid_precision` is `3`, the precision is `6`. At a precision of `6`, hexagonal cells have an H3 resolution of `2`. If `<zoom>` is `3` and `grid_precision` is `4`, the precision is `7`. At a precision of `7`, hexagonal cells have an H3 resolution of `3`.\n\n  | Precision | Unique tile bins   | H3 resolution | Unique hex bins | Ratio          |\n  | :-------- | :----------------- | :------------ | :-------------- | :------------- |\n  | 1         | 4                  | 0             | 122             | 30.5           |\n  | 2         | 16                 | 0             | 122             | 7.625          |\n  | 3         | 64                 | 1             | 842             | 13.15625       |\n  | 4         | 256                | 1             | 842             | 3.2890625      |\n  | 5         | 1024               | 2             | 5882            | 5.744140625    |\n  | 6         | 4096               | 2             | 5882            | 1.436035156    |\n  | 7         | 16384              | 3             | 41162           | 2.512329102    |\n  | 8         | 65536              | 3             | 41162           | 0.6280822754   |\n  | 9         | 262144             | 4             | 288122          | 1.099098206    |\n  | 10        | 1048576            | 4             | 288122          | 0.2747745514   |\n  | 11        | 4194304            | 5             | 2016842         | 0.4808526039   |\n  | 12        | 16777216           | 6             | 14117882        | 0.8414913416   |\n  | 13        | 67108864           | 6             | 14117882        | 0.2103728354   |\n  | 14        | 268435456          | 7             | 98825162        | 0.3681524172   |\n  | 15        | 1073741824         | 8             | 691776122       | 0.644266719    |\n  | 16        | 4294967296         | 8             | 691776122       | 0.1610666797   |\n  | 17        | 17179869184        | 9             | 4842432842      | 0.2818666889   |\n  | 18        | 68719476736        | 10            | 33897029882     | 0.4932667053   |\n  | 19        | 274877906944       | 11            | 237279209162    | 0.8632167343   |\n  | 20        | 1099511627776      | 11            | 237279209162    | 0.2158041836   |\n  | 21        | 4398046511104      | 12            | 1660954464122   | 0.3776573213   |\n  | 22        | 17592186044416     | 13            | 11626681248842  | 0.6609003122   |\n  | 23        | 70368744177664     | 13            | 11626681248842  | 0.165225078    |\n  | 24        | 281474976710656    | 14            | 81386768741882  | 0.2891438866   |\n  | 25        | 1125899906842620   | 15            | 569707381193162 | 0.5060018015   |\n  | 26        | 4503599627370500   | 15            | 569707381193162 | 0.1265004504   |\n  | 27        | 18014398509482000  | 15            | 569707381193162 | 0.03162511259  |\n  | 28        | 72057594037927900  | 15            | 569707381193162 | 0.007906278149 |\n  | 29        | 288230376151712000 | 15            | 569707381193162 | 0.001976569537 |\n\n  Hexagonal cells don’t align perfectly on a vector tile. Some cells may intersect more than one vector tile. To compute the H3 resolution for each precision, Elasticsearch compares the average density of hexagonal bins at each resolution with the average density of tile bins at each zoom level. Elasticsearch uses the H3 resolution that is closest to the corresponding `geotile` density.\n\n* `grid_type`\n\n  (Optional, string) Determines the geometry type for features in the `aggs` layer. In the `aggs` layer, each feature represents a cell in the grid.\n\n  Valid values for `grid_type`\n\n  * `grid` (Default)\n\n    Each feature is a `Polygon` of the cell’s geometry. For a `grid_agg` of `geotile`, the feature is the cell’s bounding box. For a `grid_agg` of `geohex`, the feature is the hexagonal cell’s boundaries.\n\n  * `point`\n\n    Each feature is a `Point` that’s the centroid of the cell.\n\n  * `centroid`\n\n    Each feature is a `Point` that’s the centroid of the data within the cell. For complex geometries, the actual centroid may be outside the cell. In these cases, the feature is set to the closest point to the centroid inside the cell.\n\n* `query`\n\n  (Optional, object) [Query DSL](query-dsl.html \"Query DSL\") used to filter documents for the search.\n\n* `runtime_mappings`\n\n  (Optional, object of objects) Defines one or more [runtime fields](runtime-search-request.html \"Define runtime fields in a search request\") in the search request. These fields take precedence over mapped fields with the same name.\n\n  Properties of `runtime_mappings` objects\n\n  * `<field-name>`\n\n    (Required, object) Configuration for the runtime field. The key is the field name.\n\n    Properties of `<field-name>`\n\n    * `type`\n\n      (Required, string) [Field type](mapping-types.html \"Field data types\"), which can be any of the following:\n\n      * `boolean`\n      * `composite`\n      * `date`\n      * `double`\n      * `geo_point`\n      * `ip`\n      * `keyword`\n      * `long`\n      * [`lookup`](runtime-retrieving-fields.html#lookup-runtime-fields \"Retrieve fields from related indices\")\n\n    * `script`\n\n      (Optional, string) [Painless script](modules-scripting-using.html \"How to write scripts\") executed at query time. The script has access to the entire context of a document, including the original `_source` and any mapped fields plus their values.\n\n      This script must include `emit` to return calculated values. For example:\n\n      ```\n      \"script\": \"emit(doc['@timestamp'].value.dayOfWeekEnum.toString())\"\n      ```\n\n* `size`\n\n  (Optional, integer) Maximum number of features to return in the `hits` layer. Accepts `0`-`10000`. Defaults to `10000`. If `0`, results don’t include the `hits` layer.\n\n* `sort`\n\n  (Optional, array of [sort objects](sort-search-results.html \"Sort search results\")) Sorts features in the `hits` layer.\n\n  By default, the API calculates a bounding box for each feature. It sorts features based on this box’s diagonal length, from longest to shortest.\n\n* `track_total_hits`\n\n  (Optional, integer or Boolean) Number of hits matching the query to count accurately. Defaults to `10000`.\n\n  If `true`, the exact number of hits is returned at the cost of some performance. If `false`, the response does not include the total number of hits matching the query.\n\n* `with_labels`\n\n  (Optional, Boolean) If true, the hits and aggs layers will contain additional point features representing suggested label positions for the original features.\n\n  * `Point` and `MultiPoint` features will have one of the points selected.\n  * `Polygon` and `MultiPolygon` features will have a single point generated, either the centroid, if it is within the polygon, or another point within the polygon selected from the [sorted triangle-tree](geo-shape.html#geoshape-indexing-approach \"Indexing approach\").\n  * `LineString` features will likewise provide a roughly central point selected from the [triangle-tree](geo-shape.html#geoshape-indexing-approach \"Indexing approach\").\n  * The aggregation results will provide one central point for each aggregation bucket.\n\n  All attributes from the original features will also be copied to the new label features. In addition, the new features will be distinguishable using the tag `_mvt_label_position`.\n\n### Response\n\nReturned vector tiles contain the following data:\n\n* `hits`\n\n  (object) Layer containing results for the `geo_bounding_box` query.\n\n  Properties of `hits`\n\n  * `extent`\n\n    (integer) Size, in pixels, of a side of the tile. Vector tiles are square with equal sides.\n\n  - `version`\n\n    (integer) Major version number of the [Mapbox vector tile specification](https://github.com/mapbox/vector-tile-spec).\n\n  - `features`\n\n    (array of objects) Array of features. Contains a feature for each `<field>` value that matches the `geo_bounding_box` query.\n\n    Properties of `features` objects\n\n    * `geometry`\n\n      (object) Geometry for the feature.\n\n      Properties of `geometry`\n\n      * `type`\n\n        (string) Geometry type for the feature. Valid values are:\n\n        * `UNKNOWN`\n        * `POINT`\n        * `LINESTRING`\n        * `POLYGON`\n\n      * `coordinates`\n\n        (array of integers or array of arrays) Tile coordinates for the feature.\n\n    * `properties`\n\n      (object) Properties for the feature.\n\n      Properties of `properties`\n\n      * `_id`\n\n        (string) Document `_id` for the feature’s document.\n\n      * `_index`\n\n        (string) Name of the index for the feature’s document.\n\n      * `<field>`\n\n        Field value. Only returned for fields in the `fields` parameter.\n\n    * `type`\n\n      (integer) Identifier for the feature’s geometry type. Values are:\n\n      * `1` (`POINT`)\n      * `2` (`LINESTRING`)\n      * `3` (`POLYGON`)\n\n* `aggs`\n\n  (object) Layer containing results for the `grid_agg` aggregation and its sub-aggregations.\n\n  Properties of `aggs`\n\n  * `extent`\n\n    (integer) Size, in pixels, of a side of the tile. Vector tiles are square with equal sides.\n\n  * `version`\n\n    (integer) Major version number of the [Mapbox vector tile specification](https://github.com/mapbox/vector-tile-spec).\n\n  * `features`\n\n    (array of objects) Array of features. Contains a feature for each cell of the grid.\n\n    Properties of `features` objects\n\n    * `geometry`\n\n      (object) Geometry for the feature.\n\n      Properties of `geometry`\n\n      * `type`\n\n        (string) Geometry type for the feature. Valid values are:\n\n        * `UNKNOWN`\n        * `POINT`\n        * `LINESTRING`\n        * `POLYGON`\n\n      * `coordinates`\n\n        (array of integers or array of arrays) Tile coordinates for the feature.\n\n    * `properties`\n\n      (object) Properties for the feature.\n\n      Properties of `properties`\n\n      * `_count`\n\n        (long) Count of the cell’s documents.\n\n      * `_key`\n\n        (string) Bucket key of the cell in the format `<zoom>/<x>/<y>`.\n\n      * `<sub-aggregation>.value`\n\n        Sub-aggregation results for the cell. Only returned for sub-aggregations in the `aggs` parameter.\n\n    * `type`\n\n      (integer) Identifier for the feature’s geometry type. Values are:\n\n      * `1` (`POINT`)\n      * `2` (`LINESTRING`)\n      * `3` (`POLYGON`)\n\n* `meta`\n\n  (object) Layer containing metadata for the request.\n\n  Properties of `meta`\n\n  * `extent`\n\n    (integer) Size, in pixels, of a side of the tile. Vector tiles are square with equal sides.\n\n  * `version`\n\n    (integer) Major version number of the [Mapbox vector tile specification](https://github.com/mapbox/vector-tile-spec).\n\n  * `features`\n\n    (array of objects) Contains a feature for a bounding box.\n\n    Properties of `features` objects\n\n    * `geometry`\n\n      (object) Geometry for the feature.\n\n      Properties of `geometry`\n\n      * `type`\n\n        (string) Geometry type for the feature. Valid values are:\n\n        * `UNKNOWN`\n        * `POINT`\n        * `LINESTRING`\n        * `POLYGON`\n\n      * `coordinates`\n\n        (array of integers or array of arrays) Tile coordinates for the feature.\n\n    * `properties`\n\n      (object) Properties for the feature.\n\n      Properties of `properties`\n\n      * `_shards.failed`\n\n        (integer) Number of shards that failed to execute the search. See the search API’s [`shards`](search-search.html#search-api-shards) response property.\n\n      * `_shards.skipped`\n\n        (integer) Number of shards that skipped the search. See the search API’s [`shards`](search-search.html#search-api-shards) response property.\n\n      * `_shards.successful`\n\n        (integer) Number of shards that executed the search successfully. See the search API’s [`shards`](search-search.html#search-api-shards) response property.\n\n      * `_shards.total`\n\n        (integer) Total number of shards that required querying, including unallocated shards. See the search API’s [`shards`](search-search.html#search-api-shards) response property.\n\n      * `aggregations._count.avg`\n\n        (float) Average `_count` value for features in the `aggs` layer.\n\n      * `aggregations._count.count`\n\n        (integer) Number of unique `_count` values for features in the `aggs` layer.\n\n      * `aggregations._count.max`\n\n        (float) Largest `_count` value for features in the `aggs` layer.\n\n      * `aggregations._count.min`\n\n        (float) Smallest `_count` value for features in the `aggs` layer.\n\n      * `aggregations._count.sum`\n\n        (float) Sum of `_count` values for features in the `aggs` layer.\n\n      * `aggregations.<sub-aggregation>.avg`\n\n        (float) Average value for the sub-aggregation’s results.\n\n      * `aggregations.<agg_name>.count`\n\n        (integer) Number of unique values from the sub-aggregation’s results.\n\n      * `aggregations.<agg_name>.max`\n\n        (float) Largest value from the sub-aggregation’s results.\n\n      * `aggregations.<agg_name>.min`\n\n        (float) Smallest value from the sub-aggregation’s results.\n\n      * `aggregations.<agg_name>.sum`\n\n        (float) Sum of values for the sub-aggregation’s results.\n\n      * `hits.max_score`\n\n        (float) Highest document `_score` for the search’s hits.\n\n      * `hits.total.relation`\n\n        (string) Indicates whether `hits.total.value` is accurate or a lower bound. Possible values are:\n\n        * `eq`\n\n          Accurate\n\n        * `gte`\n\n          Lower bound\n\n      * `hits.total.value`\n\n        (integer) Total number of hits for the search.\n\n      * `timed_out`\n\n        (Boolean) If `true`, the search timed out before completion. Results may be partial or empty.\n\n      * `took`\n\n        (integer) Milliseconds it took Elasticsearch to run the search. See the search API’s [`took`](search-search.html#search-api-took) response property.\n\n    * `type`\n\n      (integer) Identifier for the feature’s geometry type. Values are:\n\n      * `1` (`POINT`)\n      * `2` (`LINESTRING`)\n      * `3` (`POLYGON`)\n\n### Examples\n\nThe following requests create the `museum` index and add several geospatial `location` values.\n\n```\nresp = client.indices.create(\n    index=\"museums\",\n    mappings={\n        \"properties\": {\n            \"location\": {\n                \"type\": \"geo_point\"\n            },\n            \"name\": {\n                \"type\": \"keyword\"\n            },\n            \"price\": {\n                \"type\": \"long\"\n            },\n            \"included\": {\n                \"type\": \"boolean\"\n            }\n        }\n    },\n)\nprint(resp)\n\nresp1 = client.bulk(\n    index=\"museums\",\n    refresh=True,\n    operations=[\n        {\n            \"index\": {\n                \"_id\": \"1\"\n            }\n        },\n        {\n            \"location\": \"POINT (4.912350 52.374081)\",\n            \"name\": \"NEMO Science Museum\",\n            \"price\": 1750,\n            \"included\": True\n        },\n        {\n            \"index\": {\n                \"_id\": \"2\"\n            }\n        },\n        {\n            \"location\": \"POINT (4.901618 52.369219)\",\n            \"name\": \"Museum Het Rembrandthuis\",\n            \"price\": 1500,\n            \"included\": False\n        },\n        {\n            \"index\": {\n                \"_id\": \"3\"\n            }\n        },\n        {\n            \"location\": \"POINT (4.914722 52.371667)\",\n            \"name\": \"Nederlands Scheepvaartmuseum\",\n            \"price\": 1650,\n            \"included\": True\n        },\n        {\n            \"index\": {\n                \"_id\": \"4\"\n            }\n        },\n        {\n            \"location\": \"POINT (4.914722 52.371667)\",\n            \"name\": \"Amsterdam Centre for Architecture\",\n            \"price\": 0,\n            \"included\": True\n        }\n    ],\n)\nprint(resp1)\n```\n\n```\nresponse = client.indices.create(\n  index: 'museums',\n  body: {\n    mappings: {\n      properties: {\n        location: {\n          type: 'geo_point'\n        },\n        name: {\n          type: 'keyword'\n        },\n        price: {\n          type: 'long'\n        },\n        included: {\n          type: 'boolean'\n        }\n      }\n    }\n  }\n)\nputs response\n\nresponse = client.bulk(\n  index: 'museums',\n  refresh: true,\n  body: [\n    {\n      index: {\n        _id: '1'\n      }\n    },\n    {\n      location: 'POINT (4.912350 52.374081)',\n      name: 'NEMO Science Museum',\n      price: 1750,\n      included: true\n    },\n    {\n      index: {\n        _id: '2'\n      }\n    },\n    {\n      location: 'POINT (4.901618 52.369219)',\n      name: 'Museum Het Rembrandthuis',\n      price: 1500,\n      included: false\n    },\n    {\n      index: {\n        _id: '3'\n      }\n    },\n    {\n      location: 'POINT (4.914722 52.371667)',\n      name: 'Nederlands Scheepvaartmuseum',\n      price: 1650,\n      included: true\n    },\n    {\n      index: {\n        _id: '4'\n      }\n    },\n    {\n      location: 'POINT (4.914722 52.371667)',\n      name: 'Amsterdam Centre for Architecture',\n      price: 0,\n      included: true\n    }\n  ]\n)\nputs response\n```\n\n```\nconst response = await client.indices.create({\n  index: \"museums\",\n  mappings: {\n    properties: {\n      location: {\n        type: \"geo_point\",\n      },\n      name: {\n        type: \"keyword\",\n      },\n      price: {\n        type: \"long\",\n      },\n      included: {\n        type: \"boolean\",\n      },\n    },\n  },\n});\nconsole.log(response);\n\nconst response1 = await client.bulk({\n  index: \"museums\",\n  refresh: \"true\",\n  operations: [\n    {\n      index: {\n        _id: \"1\",\n      },\n    },\n    {\n      location: \"POINT (4.912350 52.374081)\",\n      name: \"NEMO Science Museum\",\n      price: 1750,\n      included: true,\n    },\n    {\n      index: {\n        _id: \"2\",\n      },\n    },\n    {\n      location: \"POINT (4.901618 52.369219)\",\n      name: \"Museum Het Rembrandthuis\",\n      price: 1500,\n      included: false,\n    },\n    {\n      index: {\n        _id: \"3\",\n      },\n    },\n    {\n      location: \"POINT (4.914722 52.371667)\",\n      name: \"Nederlands Scheepvaartmuseum\",\n      price: 1650,\n      included: true,\n    },\n    {\n      index: {\n        _id: \"4\",\n      },\n    },\n    {\n      location: \"POINT (4.914722 52.371667)\",\n      name: \"Amsterdam Centre for Architecture\",\n      price: 0,\n      included: true,\n    },\n  ],\n});\nconsole.log(response1);\n```\n\n```\nPUT museums\n{\n  \"mappings\": {\n    \"properties\": {\n      \"location\": {\n        \"type\": \"geo_point\"\n      },\n      \"name\": {\n        \"type\": \"keyword\"\n      },\n      \"price\": {\n        \"type\": \"long\"\n      },\n      \"included\": {\n        \"type\": \"boolean\"\n      }\n    }\n  }\n}\n\nPOST museums/_bulk?refresh\n{ \"index\": { \"_id\": \"1\" } }\n{ \"location\": \"POINT (4.912350 52.374081)\", \"name\": \"NEMO Science Museum\",  \"price\": 1750, \"included\": true }\n{ \"index\": { \"_id\": \"2\" } }\n{ \"location\": \"POINT (4.901618 52.369219)\", \"name\": \"Museum Het Rembrandthuis\", \"price\": 1500, \"included\": false }\n{ \"index\": { \"_id\": \"3\" } }\n{ \"location\": \"POINT (4.914722 52.371667)\", \"name\": \"Nederlands Scheepvaartmuseum\", \"price\":1650, \"included\": true }\n{ \"index\": { \"_id\": \"4\" } }\n{ \"location\": \"POINT (4.914722 52.371667)\", \"name\": \"Amsterdam Centre for Architecture\", \"price\":0, \"included\": true }\n```\n\nThe following request searches the index for `location` values that intersect the `13/4207/2692` vector tile.\n\n```\nresp = client.search_mvt(\n    index=\"museums\",\n    field=\"location\",\n    zoom=\"13\",\n    x=\"4207\",\n    y=\"2692\",\n    grid_agg=\"geotile\",\n    grid_precision=2,\n    fields=[\n        \"name\",\n        \"price\"\n    ],\n    query={\n        \"term\": {\n            \"included\": True\n        }\n    },\n    aggs={\n        \"min_price\": {\n            \"min\": {\n                \"field\": \"price\"\n            }\n        },\n        \"max_price\": {\n            \"max\": {\n                \"field\": \"price\"\n            }\n        },\n        \"avg_price\": {\n            \"avg\": {\n                \"field\": \"price\"\n            }\n        }\n    },\n)\nprint(resp)\n```\n\n```\nconst response = await client.searchMvt({\n  index: \"museums\",\n  field: \"location\",\n  zoom: 13,\n  x: 4207,\n  y: 2692,\n  grid_agg: \"geotile\",\n  grid_precision: 2,\n  fields: [\"name\", \"price\"],\n  query: {\n    term: {\n      included: true,\n    },\n  },\n  aggs: {\n    min_price: {\n      min: {\n        field: \"price\",\n      },\n    },\n    max_price: {\n      max: {\n        field: \"price\",\n      },\n    },\n    avg_price: {\n      avg: {\n        field: \"price\",\n      },\n    },\n  },\n});\nconsole.log(response);\n```\n\n```\nGET museums/_mvt/location/13/4207/2692\n{\n  \"grid_agg\": \"geotile\",\n  \"grid_precision\": 2,\n  \"fields\": [\n    \"name\",\n    \"price\"\n  ],\n  \"query\": {\n    \"term\": {\n      \"included\": true\n    }\n  },\n  \"aggs\": {\n    \"min_price\": {\n      \"min\": {\n        \"field\": \"price\"\n      }\n    },\n    \"max_price\": {\n      \"max\": {\n        \"field\": \"price\"\n      }\n    },\n    \"avg_price\": {\n      \"avg\": {\n        \"field\": \"price\"\n      }\n    }\n  }\n}\n```\n\nThe API returns results as a binary vector tile. When decoded into JSON, the tile contains the following data:\n\n```\n{\n  \"hits\": {\n    \"extent\": 4096,\n    \"version\": 2,\n    \"features\": [\n      {\n        \"geometry\": {\n          \"type\": \"Point\",\n          \"coordinates\": [\n            3208,\n            3864\n          ]\n        },\n        \"properties\": {\n          \"_id\": \"1\",\n          \"_index\": \"museums\",\n          \"name\": \"NEMO Science Museum\",\n          \"price\": 1750\n        },\n        \"type\": 1\n      },\n      {\n        \"geometry\": {\n          \"type\": \"Point\",\n          \"coordinates\": [\n            3429,\n            3496\n          ]\n        },\n        \"properties\": {\n          \"_id\": \"3\",\n          \"_index\": \"museums\",\n          \"name\": \"Nederlands Scheepvaartmuseum\",\n          \"price\": 1650\n        },\n        \"type\": 1\n      },\n      {\n        \"geometry\": {\n          \"type\": \"Point\",\n          \"coordinates\": [\n            3429,\n            3496\n          ]\n        },\n        \"properties\": {\n          \"_id\": \"4\",\n          \"_index\": \"museums\",\n          \"name\": \"Amsterdam Centre for Architecture\",\n          \"price\": 0\n        },\n        \"type\": 1\n      }\n    ]\n  },\n  \"aggs\": {\n    \"extent\": 4096,\n    \"version\": 2,\n    \"features\": [\n      {\n        \"geometry\": {\n          \"type\": \"Polygon\",\n          \"coordinates\": [\n            [\n              [\n                3072,\n                3072\n              ],\n              [\n                4096,\n                3072\n              ],\n              [\n                4096,\n                4096\n              ],\n              [\n                3072,\n                4096\n              ],\n              [\n                3072,\n                3072\n              ]\n            ]\n          ]\n        },\n        \"properties\": {\n          \"_count\": 3,\n          \"max_price.value\": 1750.0,\n          \"min_price.value\": 0.0,\n          \"avg_price.value\": 1133.3333333333333\n        },\n        \"type\": 3\n      }\n    ]\n  },\n  \"meta\": {\n    \"extent\": 4096,\n    \"version\": 2,\n    \"features\": [\n      {\n        \"geometry\": {\n          \"type\": \"Polygon\",\n          \"coordinates\": [\n            [\n              [\n                0,\n                0\n              ],\n              [\n                4096,\n                0\n              ],\n              [\n                4096,\n                4096\n              ],\n              [\n                0,\n                4096\n              ],\n              [\n                0,\n                0\n              ]\n            ]\n          ]\n        },\n        \"properties\": {\n          \"_shards.failed\": 0,\n          \"_shards.skipped\": 0,\n          \"_shards.successful\": 1,\n          \"_shards.total\": 1,\n          \"aggregations._count.avg\": 3.0,\n          \"aggregations._count.count\": 1,\n          \"aggregations._count.max\": 3.0,\n          \"aggregations._count.min\": 3.0,\n          \"aggregations._count.sum\": 3.0,\n          \"aggregations.avg_price.avg\": 1133.3333333333333,\n          \"aggregations.avg_price.count\": 1,\n          \"aggregations.avg_price.max\": 1133.3333333333333,\n          \"aggregations.avg_price.min\": 1133.3333333333333,\n          \"aggregations.avg_price.sum\": 1133.3333333333333,\n          \"aggregations.max_price.avg\": 1750.0,\n          \"aggregations.max_price.count\": 1,\n          \"aggregations.max_price.max\": 1750.0,\n          \"aggregations.max_price.min\": 1750.0,\n          \"aggregations.max_price.sum\": 1750.0,\n          \"aggregations.min_price.avg\": 0.0,\n          \"aggregations.min_price.count\": 1,\n          \"aggregations.min_price.max\": 0.0,\n          \"aggregations.min_price.min\": 0.0,\n          \"aggregations.min_price.sum\": 0.0,\n          \"hits.max_score\": 0.0,\n          \"hits.total.relation\": \"eq\",\n          \"hits.total.value\": 3,\n          \"timed_out\": false,\n          \"took\": 2\n        },\n        \"type\": 3\n      }\n    ]\n  }\n}\n```\n","inference":{"inference_id":".elser-2-elasticsearch","model_settings":{"task_type":"sparse_embedding"},"chunks":[{"text":"## Vector tile search API\n\nSearches a vector tile for geospatial values. Returns results as a binary [Mapbox vector tile](https://docs.mapbox.com/vector-tiles/specification).\n\n```\nresp = client.search_mvt(\n    index=\"my-index\",\n    field=\"my-geo-field\",\n    zoom=\"15\",\n    x=\"5271\",\n    y=\"12710\",\n)\nprint(resp)\n```\n\n```\nconst response = await client.searchMvt({\n  index: \"my-index\",\n  field: \"my-geo-field\",\n  zoom: 15,\n  x: 5271,\n  y: 12710,\n});\nconsole.log(response);\n```\n\n```\nGET my-index/_mvt/my-geo-field/15/5271/12710\n```\n\n### Request\n\n`GET <target>/_mvt/<field>/<zoom>/<x>/<y>`\n\n`POST <target>/_mvt/<field>/<zoom>/<x>/<y>`\n\n### Prerequisites\n\n* Before using this API, you should be familiar with the [Mapbox vector tile specification](https://github.com/mapbox/vector-tile-spec).\n* If the Elasticsearch security features are enabled, you must have the `read` [index privilege](security-privileges.html#privileges-list-indices \"Indices privileges\") for the target data stream, index, or alias. For cross-cluster search, see [*Remote clusters*](remote-clusters.html \"Remote clusters\").\n\n### Path parameters\n\n* `<target>`\n\n  (Required, string) Comma-separated list of data streams, indices, or aliases to search. Supports wildcards (`*`). To search all data streams and indices, omit this parameter or use `*` or `_all`.\n\n  To search a remote cluster, use the `<cluster>:<target>` syntax. See [*Search across clusters*](modules-cross-cluster-search.html \"Search across clusters\").\n\n* `<field>`\n\n  (Required, string) Field containing geospatial values to return. Must be a [`geo_point`](geo-point.html \"Geopoint field type\") or [`geo_shape`](geo-shape.html \"Geoshape field type\") field. The field must have [doc values](doc-values.html \"doc_values\") enabled. Cannot be a nested field.\n\n","embeddings":{"15":1.2189603,"51":0.10012613,"52":1.3032312,"127":1.4269583,"128":0.70038706,"tile":1.9909006,"vector":1.9741206,"zoom":1.7055403,"api":1.6178559,"elastic":1.5625403,"##box":1.4865896,"map":1.485907,"geo":1.4818127,"cluster":1.4597884,"index":1.4422607,"search":1.405801,"client":1.3832928,"tiles":1.3632396,"remote":1.3558722,"mv":1.3060089,"##ati":1.2988256,"##sea":1.2531252,"res":1.2468653,"await":1.2082832,"wild":1.1916828,"target":1.186126,"stream":1.1832955,"binary":1.1782235,"##st":1.1527158,"##sp":1.1494584,"privilege":1.14397,"clusters":1.1421713,"privileges":1.1397464,"box":1.134446,"my":1.124775,"y":1.0910307,"spec":1.0889672,"#":1.0748925,"##t":1.0313275,"data":0.9490821,"alias":0.9466034,"modules":0.91725993,"java":0.91662735,"specification":0.8738914,"field":0.8647434,"streams":0.8056263,"indices":0.80485916,"parameters":0.7658163,"value":0.76409745,"print":0.75652087,"cross":0.7520519,"values":0.7513748,"algorithm":0.74094796,"response":0.74068105,"syntax":0.7211411,"amazon":0.71018124,"maps":0.7096357,"##quisite":0.70592535,"##rch":0.70153785,"log":0.697576,"doc":0.69718665,"##7":0.6879026,"string":0.6668671,"##p":0.6630584,"find":0.65234375,"apache":0.6256186,"console":0.61578894,"specifications":0.6056538,"across":0.5815076,"til":0.579608,"path":0.5763492,"html":0.5733677,"awaiting":0.5731922,"##card":0.5662031,"##ma":0.56599116,"##10":0.56449354,"mosaic":0.5622502,"respond":0.5599638,"module":0.55775714,"##cards":0.53622055,"streaming":0.5354128,"results":0.5240605,"##m":0.5155586,"mapping":0.49983466,"features":0.49286994,"##v":0.49093845,"clients":0.49013942,"security":0.48457125,"geometric":0.4843084,"survey":0.4831893,"searching":0.4724206,"gps":0.45801026,"targeted":0.4568381,"list":0.4482004,"server":0.44330645,"scope":0.43650714,"##ub":0.43157855,"network":0.42563573,"software":0.42507324,"parameter":0.42191052,"spatial":0.4109803,"math":0.41090292,"google":0.40739015,"interface":0.40580392,"terrain":0.39611173,"targeting":0.39256755,"rights":0.38959935,"board":0.38648063,"database":0.3756868,"test":0.36373112,"grid":0.36358047,"hunting":0.36323765,"domain":0.3592522,"result":0.3550389,"legacy":0.35480568,"tool":0.35289487,"geographic":0.3358034,"website":0.3356812,"method":0.32655782,"geography":0.3239029,"scan":0.31875488,"web":0.31135896,"mountain":0.3092312,"_":0.3088152,"inventory":0.3022205,"enabled":0.2953707,"explorer":0.27072927,"swarm":0.27052364,"fields":0.26197746,"online":0.25579295,"bug":0.25570434,"node":0.25279385,"return":0.25143245,"mp":0.2498366,"sid":0.2423636,"framework":0.24216338,"zip":0.23570254,"probe":0.23329522,"indexed":0.22687888,"lists":0.22028397,"##1":0.21663918,"php":0.19201033,"script":0.17512643,"tutor":0.17237906,"gi":0.17153479,"flow":0.17001581,"familiar":0.1683543,"protocol":0.16181055,"threat":0.15442783,"square":0.14920963,"me":0.14868385,"platform":0.14712685,"radar":0.14389512,"bot":0.1359801,"file":0.1351065,"sonar":0.124952115,"cod":0.12407241,"editor":0.12255653,"encryption":0.12070918,"hunt":0.117372975,"x":0.10561223,"explore":0.10227018,"certification":0.099792056,"pattern":0.094707906,"scanning":0.08928251,"privileged":0.08667905,"sort":0.08495065,"-":0.08241326,"returned":0.07993149,"quest":0.07697466,"tab":0.076300465,"excel":0.07609291,"checkpoint":0.06950974,"cad":0.06848603,"using":0.067134485,"code":0.06014307,"analysis":0.058659244,"size":0.05227698,"v":0.050869465,"enable":0.048319757,"is":0.0473878,"ip":0.047231235,"land":0.04670587,"clustered":0.044670742,"apr":0.04223682,"secure":0.041889578,"forest":0.041879974,"satellite":0.03723031,"feature":0.035236087,"zone":0.032864198,"look":0.027428912,"detection":0.025816943,"vectors":0.015778339,"button":0.013685917,"resolution":0.011416701,"get":0.008373274,"z":0.0045121284}},{"text":"\n  Vector tiles do not natively support geometry collections. For `geometrycollection` values in a `geo_shape` field, the API returns a `hits` layer feature for each element of the collection. This behavior may change in a future release.\n\n* `<zoom>`\n\n  (Required, integer) Zoom level for the vector tile to search. Accepts `0`-`29`.\n\n* `<x>`\n\n  (Required, integer) X coordinate for the vector tile to search.\n\n* `<y>`\n\n  (Required, integer) Y coordinate for the vector tile to search.\n\n### Description\n\nInternally, Elasticsearch translates a vector tile search API request into a [search](search-search.html \"Search API\") containing:\n\n* A [`geo_bounding_box`](query-dsl-geo-bounding-box-query.html \"Geo-bounding box query\") query on the `<field>`. The query uses the `<zoom>/<x>/<y>` tile as a bounding box.\n* A [`geotile_grid`](search-aggregations-bucket-geotilegrid-aggregation.html \"Geotile grid aggregation\") or [`geohex_grid`](search-aggregations-bucket-geohexgrid-aggregation.html \"Geohex grid aggregation\") aggregation on the `<field>`. The `grid_agg` parameter determines the aggregation type. The aggregation uses the `<zoom>/<x>/<y>` tile as a bounding box.\n* Optionally, a [`geo_bounds`](search-aggregations-metrics-geobounds-aggregation.html \"Geo-bounds aggregation\") aggregation on the `<field>`. The search only includes this aggregation if the `exact_bounds` parameter is `true`.\n* If the optional parameter `with_labels` is true, the internal search will include a dynamic runtime field that calls the `getLabelPosition` function of the geometry doc value. This enables the generation of new point features containing suggested geometry labels, so that, for example, multi-polygons will have only one label.\n\n","embeddings":{"0":0.47097102,"28":0.25936997,"29":1.0623982,"vector":2.0927968,"tile":1.9318385,"api":1.7277882,"tiles":1.7248014,"##tile":1.7157327,"zoom":1.6425933,"elastic":1.5983042,"aggregation":1.5825256,"geo":1.5492386,"##sea":1.5119952,"grid":1.4088624,"##ection":1.397549,"##he":1.3843323,"geometric":1.3832492,"bound":1.3695967,"ag":1.360724,"##position":1.3127431,"geometry":1.3077577,"box":1.2630904,"hit":1.2598915,"collection":1.2427348,"search":1.2354218,"label":1.1747644,"hits":1.1531454,"##coll":1.1488099,"shape":1.146374,"##rch":1.1430333,"##gr":1.0769346,"native":1.0630823,"layer":1.0598882,"##lab":1.0500737,"java":1.0489718,"collections":1.0333904,"y":1.0189497,"point":0.9909202,"til":0.9625285,"integer":0.947642,"##x":0.93739164,"html":0.9331728,"algorithm":0.91839784,"##g":0.9053609,"behavior":0.8825148,"bucket":0.8820941,"##id":0.85498196,"internal":0.794209,"features":0.7936156,"labels":0.77704805,"bounds":0.7731809,"##l":0.77234113,"math":0.7714977,"x":0.76333046,"dynamic":0.7508716,"feature":0.73364764,"optional":0.72862977,"values":0.72441715,"##ing":0.72166806,"poly":0.70396405,"value":0.69649875,"field":0.6927233,"doc":0.6903135,"map":0.68977183,"board":0.6885197,"##ect":0.67606014,"parameter":0.6686644,"metric":0.6683482,"index":0.65753907,"square":0.6516565,"multi":0.6457968,"##gon":0.63784325,"##bound":0.6329642,"layers":0.6312914,"##el":0.609493,"function":0.6078379,"amazon":0.5986073,"query":0.5830847,"get":0.58092916,"parameters":0.5725319,"_":0.5660924,"support":0.56193435,"domain":0.54982454,"aggregate":0.545061,"shapes":0.5395063,"ds":0.5309233,"spatial":0.52807087,"coordinate":0.526101,"mosaic":0.51034015,"find":0.49459562,"element":0.49128592,"google":0.48585197,"sid":0.47916386,"not":0.4777078,"coordinates":0.45977002,"##time":0.45762184,"level":0.44772956,"type":0.43820167,"apache":0.43575516,"exact":0.42774662,"geography":0.4260774,"mat":0.42599314,"grouping":0.4222203,"translate":0.41582334,"terrain":0.41326058,"gps":0.41072333,"bug":0.4030556,"scope":0.35873356,"version":0.34196448,"interface":0.33967254,"searching":0.33693328,"class":0.32862222,"mapping":0.31712463,"cad":0.315145,"binding":0.3142757,"vectors":0.3077989,"corner":0.3064995,"web":0.30375412,"survey":0.3016356,"swarm":0.29422846,"data":0.28836343,"apr":0.2828013,"website":0.27986383,"fields":0.2787971,"elements":0.27053228,"compilation":0.26137817,"points":0.25696498,"request":0.25135094,"database":0.24421048,"##xa":0.24119107,"legacy":0.24062632,"boxes":0.23995848,"platform":0.23671858,"run":0.23147741,"strike":0.22211133,"criteria":0.21565326,"knowledge":0.21417016,"display":0.20458858,"tiled":0.19907326,"supported":0.1901055,"hunting":0.18504985,"shaped":0.18463297,"pattern":0.1773821,"multiple":0.17439604,"explore":0.1720214,"software":0.16321962,"sea":0.15653318,"##se":0.15626046,"compatible":0.15542136,"3d":0.154627,"network":0.15325925,"##tra":0.15271011,"chess":0.14649495,"geographic":0.14314392,"editor":0.14073989,"translation":0.13856673,"global":0.1336006,"library":0.095079236,"sort":0.09487402,"floor":0.09011601,"suggested":0.08707435,"tess":0.08617991,"association":0.0819199,"hunt":0.07817374,"chart":0.077817254,"size":0.0746255,"group":0.06783404,"accept":0.06135599,"marble":0.05831541,"server":0.05200326,"del":0.049880344,"ur":0.045023512,"explorer":0.044798415,"link":0.042924657,"tensor":0.04245518,"selection":0.041181464,"detection":0.038868718,"types":0.038538314,"non":0.031803984,"since":0.031274956,"quest":0.02495935,"dh":0.02154505,"cube":0.008561218,"returned":0.0074058045,"##lib":0.004937954,"determine":0.0021657124}},{"text":"\nFor example, Elasticsearch may translate a vector tile search API request with a `grid_agg` argument of `geotile` and an `exact_bounds` argument of `true` into the following search:\n\n```\nresp = client.search(\n    index=\"my-index\",\n    size=10000,\n    query={\n        \"geo_bounding_box\": {\n            \"my-geo-field\": {\n                \"top_left\": {\n                    \"lat\": -40.979898069620134,\n                    \"lon\": -45\n                },\n                \"bottom_right\": {\n                    \"lat\": -66.51326044311186,\n                    \"lon\": 0\n                }\n            }\n        }\n    },\n    aggregations={\n        \"grid\": {\n            \"geotile_grid\": {\n                \"field\": \"my-geo-field\",\n                \"precision\": 11,\n                \"size\": 65536,\n                \"bounds\": {\n                    \"top_left\": {\n                        \"lat\": -40.979898069620134,\n                        \"lon\": -45\n                    },\n                    \"bottom_right\": {\n                        \"lat\": -66.51326044311186,\n                        \"lon\": 0\n                    }\n                }\n            }\n        },\n        \"bounds\": {\n            \"geo_bounds\": {\n                \"field\": \"my-geo-field\",\n                \"wrap_longitude\": False\n            }\n        }\n    },\n)\nprint(resp)\n```\n\n```\nconst response = await client.search({\n  index: \"my-index\",\n  size: 10000,\n  query: {\n    geo_bounding_box: {\n      \"my-geo-field\": {\n        top_left: {\n          lat: -40.979898069620134,\n          lon: -45,\n        },\n        bottom_right: {\n          lat: -66.51326044311186,\n          lon: 0,\n        },\n      },\n    },\n  },\n  aggregations: {\n    grid: {\n      geotile_grid: {\n        field: \"my-geo-field\",\n        precision: 11,\n        size: 65536,\n        bounds: {\n          top_left: {\n            lat: -40.979898069620134,\n            lon: -45,\n          },\n          bottom_right: {\n            lat: -66.51326044311186,\n            lon: 0,\n          },\n        },\n      },\n    },\n    bounds: {\n      geo_bounds: {\n        field: \"my-geo-field\",\n        wrap_longitude: false,\n      },\n    },\n  },\n});\nconsole.log(response);\n```\n\n```\nGET my-index/_search\n{\n  \"size\": 10000,\n  \"query\": {\n    \"geo_bounding_box\": {\n      \"my-geo-field\": {\n        \"top_left\": {\n          \"lat\": -40.979898069620134,\n          \"lon\": -45\n        },\n        \"bottom_right\": {\n          \"lat\": -66.51326044311186,\n          \"lon\": 0\n        }\n      }\n    }\n  },\n  \"aggregations\": {\n    \"grid\": {\n      \"geotile_grid\": {\n        \"field\": \"my-geo-field\",\n        \"precision\": 11,\n        \"size\": 65536,\n        \"bounds\": {\n          \"top_left\": {\n            \"lat\": -40.979898069620134,\n            \"lon\": -45\n          },\n          \"bottom_right\": {\n            \"lat\": -66.51326044311186,\n            \"lon\": 0\n          }\n        }\n      }\n    },\n    \"bounds\": {\n      \"geo_bounds\": {\n        \"field\": \"my-geo-field\",\n        \"wrap_longitude\": false\n      }\n    }\n  }\n}\n```\n\nThe API returns results as a binary [Mapbox vector tile](https://github.com/mapbox/vector-tile-spec). Mapbox vector tiles are encoded as [Google Protobufs (PBF)](https://github.com/protocolbuffers/protobuf). By default, the tile contains three layers:\n\n* A `hits` layer containing a feature for each `<field>` value matching the `geo_bounding_box` query.\n\n","embeddings":{"40":0.58715427,"45":0.7604539,"65":0.51707506,"66":0.48915124,"1000":0.6041428,"##tile":1.980669,"elastic":1.939793,"tile":1.813275,"api":1.6935633,"vector":1.6874211,"grid":1.6634413,"ag":1.5773262,"exact":1.562754,"client":1.5545028,"##sea":1.533451,"geo":1.518261,"aggregation":1.4821104,"search":1.4154207,"translate":1.369571,"precision":1.3257612,"bound":1.3045554,"bounds":1.2900994,"index":1.2884344,"tiles":1.2157071,"request":1.1678114,"##g":1.1660007,"argument":1.1460414,"res":1.1329088,"await":1.1286105,"field":1.105246,"longitude":1.0944998,"##st":1.0938913,"wrap":1.0854886,"la":1.0577825,"translation":1.0482985,"size":1.0454452,"##rch":1.0346591,"print":1.0258375,"java":1.0145007,"true":0.9993543,"example":0.9698277,"amazon":0.949167,"algorithm":0.94784224,"box":0.9402564,"response":0.87405294,"lo":0.84231,"_":0.83962595,"##31":0.8082192,"map":0.8037576,"my":0.7612807,"awaiting":0.7571119,"clients":0.7373363,"math":0.7296015,"##ing":0.725883,"til":0.70919305,"apache":0.69652796,"##t":0.6923806,"##p":0.68801194,"query":0.6744419,"limit":0.6739546,"##n":0.66342354,"respond":0.6507868,"false":0.6473619,"aggregate":0.63464457,"find":0.6302035,"convert":0.59853286,"google":0.56820154,"##tian":0.5639677,"bottom":0.546796,"fields":0.54668546,"##86":0.5296307,"reptiles":0.5294664,"data":0.5277402,"##20":0.5240671,"length":0.51418716,"spatial":0.5066391,"terrain":0.4988236,"exactly":0.4492939,"corner":0.4470785,"arguments":0.4460771,"translating":0.4440917,"geography":0.4246894,"instance":0.42393526,"geometric":0.41902274,"domain":0.413297,"sizes":0.4121079,"hunting":0.40826944,"database":0.39487615,"gps":0.3935049,"website":0.37681806,"tempo":0.366618,"server":0.3659908,"import":0.34873664,"grouping":0.34732664,"format":0.34326693,"margin":0.34183908,"pattern":0.33458737,"mapping":0.33168328,"geographic":0.32580116,"ur":0.32378423,"framework":0.32302672,"##44":0.32123062,"resolution":0.3200244,"calculation":0.3104593,"web":0.30999827,"sonar":0.30521366,"following":0.30024818,"tiled":0.2956701,"html":0.29367787,"##tra":0.29300132,"gage":0.2894889,"property":0.28652495,"##80":0.28601784,"accuracy":0.273921,"direction":0.27264726,"limits":0.26728132,"mosaic":0.26595917,"searching":0.25125712,"association":0.24697945,"translator":0.24520746,"requests":0.24200214,"precise":0.23602636,"chart":0.2301842,"##60":0.22230339,"network":0.21884134,"mat":0.21482265,"circular":0.21318874,"peg":0.21052961,"yard":0.20770207,"proposal":0.20556547,"protocol":0.19838057,"muscle":0.19560586,"syntax":0.19495209,"survey":0.19478914,"##gs":0.19137634,"boundaries":0.19090912,"land":0.19071822,"square":0.18839155,"dimensions":0.1875019,"binding":0.18542218,"export":0.18157636,"scope":0.18044457,"sort":0.1786404,"array":0.17833057,"sea":0.17813297,"requested":0.17592527,"hash":0.17399924,"}":0.17378846,"tool":0.17366822,"inventory":0.16399464,"sid":0.15937409,"rank":0.14979108,"##13":0.14658545,"node":0.14547446,"software":0.14305599,"http":0.14226125,"cad":0.14208567,"forest":0.13921642,"string":0.1347911,"##to":0.13384598,"sql":0.12990203,"buffer":0.12768576,"left":0.12617902,"analysis":0.1241618,"display":0.12313375,"parameter":0.12236362,"cipher":0.11948792,"navigation":0.11779798,"spectrum":0.11592323,"area":0.11180356,"code":0.107995205,"maps":0.104793705,"global":0.10402007,"zone":0.1023326,"custom":0.09941848,"script":0.09851602,"border":0.09611324,"width":0.09426061,"method":0.090502,"translated":0.085851,"matching":0.07870983,"interface":0.07519467,"##field":0.074043155,"latitude":0.07291514,"scale":0.07095613,"(":0.06856194,"graphic":0.06378358,"mountain":0.062425107,"absolute":0.057402298,"algorithms":0.056594137,"rod":0.055927478,"legacy":0.05230017,"class":0.041736607,"reaction":0.04172083,"application":0.03413184,"quest":0.03304575,"mining":0.03229395,"excel":0.03075328,"log":0.030093916,"archive":0.025230456,"resolve":0.024825513,"translations":0.017644228,"apex":0.017210424,"parameters":0.015888985,"table":0.012999785,"layout":0.012896584,"online":0.009194886,"error":0.009054198,"consolidation":0.006668575,"provider":0.003989833,"satellite":0.0037250195,"explorer":0.0009887097,"quantity":0.0001491197}},{"text":"\n* An `aggs` layer containing a feature for each cell of the `geotile_grid` or `geohex_grid`. The layer only contains features for cells with matching data.\n\n* A `meta` layer containing:\n\n  * A feature containing a bounding box. By default, this is the bounding box of the tile.\n  * Value ranges for any sub-aggregations on the `geotile_grid` or `geohex_grid`.\n  * Metadata for the search.\n\nThe API only returns features that can display at its zoom level. For example, if a polygon feature has no area at its zoom level, the API omits it.\n\nThe API returns errors as UTF-8 encoded JSON.\n\n### Query parameters\n\nYou can specify several options for this API as either a query parameter or request body parameter. If you specify both parameters, the query parameter takes precedence.\n\n* `exact_bounds`\n\n  (Optional, Boolean) If `false`, the `meta` layer’s feature is the bounding box of the tile. Defaults to `false`.\n\n  If `true`, the `meta` layer’s feature is a bounding box resulting from a [`geo_bounds`](search-aggregations-metrics-geobounds-aggregation.html \"Geo-bounds aggregation\") aggregation. The aggregation runs on `<field>` values that intersect the `<zoom>/<x>/<y>` tile with `wrap_longitude` set to `false`. The resulting bounding box may be larger than the vector tile.\n\n- `extent`\n\n  (Optional, integer) Size, in pixels, of a side of the tile. Vector tiles are square with equal sides. Defaults to `4096`.\n\n* `buffer`\n\n  (Optional, integer) Size, in pixels, of a clipping buffer outside the tile. This allows renderers to avoid outline artifacts from geometries that extend past the extent of the tile. ","embeddings":{"8":1.2108605,"40":1.3645972,"tile":2.0498614,"##tile":1.8533562,"ag":1.8274018,"api":1.8270884,"zoom":1.6807944,"aggregation":1.6633025,"meta":1.587728,"grid":1.5505055,"bound":1.5459356,"layer":1.5452907,"geo":1.5212317,"##he":1.4909427,"tiles":1.4675308,"box":1.4154991,"vector":1.36712,"features":1.3200574,"matching":1.305919,"##gs":1.30068,"feature":1.2979479,"extent":1.2832128,"longitude":1.2762552,"exact":1.2539566,"bounds":1.2426183,"search":1.2218637,"outline":1.1619161,"default":1.1582619,"layers":1.1292199,"specify":1.1248107,"java":1.1210697,"optional":1.1167321,"parameters":1.1165863,"##x":1.0821303,"encoded":1.0633227,"buffer":1.021651,"##ing":0.99284285,"##son":0.982737,"cells":0.97978115,"html":0.9771462,"clip":0.967341,"request":0.96585524,"false":0.9367632,"metadata":0.9358393,"cell":0.9274597,"display":0.92219406,"precedence":0.91672647,"algorithm":0.9153076,"parameter":0.90388614,"map":0.9022735,"##gon":0.8910906,"wrap":0.88841987,"query":0.88388276,"artifacts":0.88283515,"data":0.8677827,"ut":0.8589423,"integer":0.83683294,"##ries":0.8319091,"##g":0.8257695,"poly":0.8142117,"##bound":0.79303116,"size":0.7883198,"##f":0.78273886,"boxes":0.7621696,"##ping":0.7570407,"j":0.7477521,"aggregate":0.73788506,"square":0.7334439,"_":0.70597774,"intersection":0.7022164,"area":0.6916557,"value":0.6897994,"y":0.667275,"match":0.66686153,"math":0.66627675,"til":0.65986484,"equal":0.64782304,"render":0.64064276,"boo":0.6395339,"excel":0.63407856,"error":0.63332623,"metric":0.62747175,"artifact":0.61072534,"mosaic":0.59075886,"##met":0.58409595,"range":0.5766383,"corner":0.5749224,"scope":0.574077,"intersect":0.5693314,"##6":0.56500167,"spatial":0.54443395,"##it":0.52902204,"outside":0.5261724,"http":0.510424,"##lean":0.50285524,"##9":0.49615997,"index":0.49409965,"google":0.48922506,"web":0.4889793,"resolution":0.48042557,"class":0.47959238,"pixels":0.47835955,"geometric":0.4783091,"grouping":0.47138992,"sid":0.47091854,"terrain":0.45897835,"binding":0.4548197,"side":0.42439064,"geography":0.4164736,"corresponding":0.4116692,"sides":0.39605686,"field":0.3957218,"survey":0.39335158,"ranges":0.3843993,"apache":0.37990755,"domain":0.37917194,"direction":0.37136018,"sub":0.35755444,"mapping":0.35548884,"areas":0.3535908,"pixel":0.3526485,"extend":0.35035408,"limit":0.34897602,"errors":0.33762738,"dimensions":0.3234544,"sheet":0.3202755,"image":0.31794563,"que":0.3102316,"rendering":0.30782327,"images":0.30420643,"only":0.3038664,"pattern":0.30111456,"limits":0.28820214,"contain":0.28812876,"length":0.28168514,"#":0.2791948,"##xa":0.27818602,"om":0.27484256,"interface":0.27262375,"shape":0.2632196,"analysis":0.261988,"apr":0.2502123,"an":0.24517919,"amy":0.24478067,"radar":0.24306901,"column":0.24303563,"##box":0.23447882,"encoding":0.23025493,"latitude":0.22831671,"sizes":0.22827107,"gps":0.22786927,"chart":0.21946448,"board":0.21686482,"boundaries":0.21407604,"exactly":0.21230575,"network":0.20731865,"find":0.2065416,"database":0.18955955,"zone":0.18862168,"options":0.18638146,"editor":0.18359582,"boundary":0.18335907,"tess":0.18333754,"body":0.18309496,"deployment":0.17467846,"maps":0.1707474,"cad":0.16979533,"##s":0.1620186,"bug":0.16108283,"##che":0.15954788,"result":0.15452404,"mat":0.15291126,"priority":0.15276547,"geographic":0.1495121,"method":0.14835307,"association":0.14630094,"criteria":0.14308761,"floating":0.14103892,"define":0.1388631,"protocol":0.13400082,"overlapping":0.12709174,"cube":0.12598713,"level":0.1224075,"script":0.12068255,"extended":0.11950262,"graph":0.10859223,"##se":0.10653339,"checkpoint":0.10549659,"integration":0.1014124,"3d":0.09945377,"graphic":0.09772669,"segment":0.09672238,"chess":0.09439306,"legacy":0.09103076,"values":0.090633325,"file":0.08929124,"layered":0.08412708,"similar":0.08227778,"mining":0.0749443,"bind":0.07053397,"select":0.06812696,"format":0.06787871,"##gonal":0.06489938,"return":0.064785756,"website":0.06358694,"group":0.062492862,"margin":0.06200728,"border":0.06196459,"eight":0.056918856,"##di":0.054115582,"server":0.054089833,"called":0.05380814,"##tra":0.052709863,"forest":0.04982897,"-":0.049631383,"sha":0.048405852,"geometry":0.04305198,"platform":0.04153856,"terra":0.04004483,"proposal":0.03289869,"quest":0.028021993,"question":0.02491598,"measure":0.024150942,"option":0.024007222,"rank":0.022980792,"cutting":0.02107465,"trim":0.019214803,"framework":0.018188007,"drawing":0.013273918,"amazon":0.011896495,"xml":0.00852174,"code":0.005333599,"parallel":0.0038849846,"ip":0.0037763251,"syntax":0.0029412126}},{"text":"This allows renderers to avoid outline artifacts from geometries that extend past the extent of the tile. Defaults to `5`.\n\n- `grid_agg`\n\n  (Optional, string) Aggregation used to create a grid for the `<field>`.\n\n  Valid values for `grid_agg`\n\n  * `geotile` (Default)\n\n    [`geotile_grid`](search-aggregations-bucket-geotilegrid-aggregation.html \"Geotile grid aggregation\") aggregation.\n\n  * `geohex`\n\n    [`geohex_grid`](search-aggregations-bucket-geohexgrid-aggregation.html \"Geohex grid aggregation\") aggregation.\n\n* `grid_precision`\n\n  (Optional, integer) Precision level for cells in the `grid_agg`. Accepts `0`-`8`. Defaults to `8`. If `0`, results don’t include the `aggs` layer.\n\n  Grid precision for `geotile`\n\n  For a `grid_agg` of `geotile`, you can use cells in the `aggs` layer as tiles for lower zoom levels. `grid_precision` represents the additional zoom levels available through these cells. The final precision is computed by as follows:\n\n  `<zoom> + grid_precision`\n\n  For example, if `<zoom>` is `7` and `grid_precision` is `8`, then the `geotile_grid` aggregation will use a precision of `15`. The maximum final precision is `29`.\n\n  The `grid_precision` also determines the number of cells for the grid as follows:\n\n  `(2^grid_precision) x (2^grid_precision)`\n\n  For example, a value of `8` divides the tile into a grid of 256 x 256 cells. The `aggs` layer only contains features for cells with matching data.\n\n  Grid precision for `geohex`\n\n  For a `grid_agg` of `geohex`, Elasticsearch uses `<zoom>` and `grid_precision` to calculate a final precision as follows:\n\n  `<zoom> + grid_precision`\n\n  This precision determines the [H3 resolution of the hexagonal cells](https://h3geo.org/docs/core-library/restable) produced by the `geohex` aggregation. ","embeddings":{"0":0.39613307,"5":0.8747644,"7":0.06497087,"8":0.6838599,"15":0.65497833,"29":0.46092027,"256":0.91522145,"##tile":1.9918724,"tile":1.8814355,"grid":1.8322409,"zoom":1.7195325,"aggregation":1.644852,"precision":1.6030521,"##he":1.5876256,"outline":1.5424937,"geo":1.5275356,"default":1.4908652,"ag":1.4341837,"tiles":1.3438216,"render":1.2988197,"valid":1.264377,"##sea":1.216936,"##g":1.2142609,"artifacts":1.2040924,"##ge":1.1874743,"##gr":1.1592811,"bucket":1.1545479,"optional":1.150753,"##gonal":1.1070099,"elastic":1.0948318,"##id":1.0823619,"artifact":1.0718637,"matching":1.0453938,"layer":1.0447409,"rendering":1.0291818,"search":1.0273126,"java":1.025838,"html":1.0185274,"algorithm":1.0017861,"##xa":0.9950736,"string":0.9623494,"cells":0.9602244,"##x":0.95543826,"##rch":0.9495345,"_":0.91795486,"##met":0.90660155,"##gs":0.9034218,"final":0.89850813,"maximum":0.86054087,"calculation":0.84138244,"map":0.83311534,"value":0.8134179,"math":0.8028869,"resolution":0.800434,"cell":0.7858695,"extent":0.7645195,"##3":0.74326813,"values":0.7406179,"level":0.71170574,"til":0.70487994,"aggregate":0.7028187,"features":0.70110434,"format":0.6929488,"integer":0.68728626,"core":0.6772816,"field":0.657345,"sid":0.65469295,"##ries":0.6504433,"accuracy":0.63913906,"reptiles":0.6359538,"triangular":0.63174987,"extend":0.62840325,"doc":0.6181196,"avoid":0.6084307,"grouping":0.59946305,"divide":0.59264886,"data":0.57078516,"size":0.563776,"org":0.5267627,"geometric":0.5201656,"script":0.502725,"editor":0.4933291,"chess":0.49169835,"create":0.48004562,"determined":0.47939166,"excel":0.47625062,"google":0.47326636,"outlines":0.47294447,"index":0.46551168,"shape":0.46435037,"pattern":0.464205,"spatial":0.46168956,"determine":0.45807678,"mat":0.4575784,"cad":0.43672717,"shadow":0.42760405,"scope":0.425658,"calculate":0.4252995,"chart":0.42197,"syntax":0.41593298,"`":0.4129103,"texture":0.40889087,"layout":0.40528643,"layers":0.40501735,"class":0.4031676,"division":0.39643392,"display":0.3890348,"3d":0.38648823,"h":0.37807092,"dimensions":0.37772194,"manipulation":0.37000996,"terrain":0.36995915,"notation":0.3640365,"##tra":0.36209846,"domain":0.34960607,"##o":0.34685576,"square":0.34309617,"board":0.33447433,"gage":0.33167362,"geography":0.33106452,"game":0.32956725,"library":0.32262066,"levels":0.32067868,"match":0.31348848,"sha":0.31234095,"precise":0.30595943,"finished":0.305653,"apache":0.29399216,"graphic":0.29339913,"he":0.28429258,"##tian":0.27694103,"cube":0.27297094,"degradation":0.27239555,"acceptable":0.2711376,"##se":0.26595223,"feature":0.2577923,"survey":0.24956562,"computed":0.24861164,"##che":0.24826072,"decimal":0.24634491,"software":0.24146725,"useful":0.23750517,"association":0.22480129,"results":0.22276926,"length":0.2225335,"extended":0.22216642,"font":0.22040515,"result":0.2184755,"mode":0.2109061,"vector":0.203353,"##ers":0.20024943,"pixel":0.19872737,"image":0.19583513,"camera":0.19549029,"sharp":0.19447838,"tex":0.18980718,"gps":0.18672393,"border":0.18502271,"number":0.1826723,"mapping":0.18184355,"checkpoint":0.17818733,"column":0.17080548,"legacy":0.17046045,"buffer":0.17041178,"protocol":0.16903013,"global":0.16741711,"web":0.15427816,"assembly":0.14893049,"five":0.14692442,"tab":0.14467813,"'":0.14230199,"lower":0.14193383,"bot":0.1380486,"parameters":0.13420191,"mosaic":0.13035166,"mar":0.12833562,"tess":0.12565401,"fields":0.11710633,"accept":0.113883175,"rank":0.11204583,"website":0.10872461,"##le":0.10633405,"analysis":0.10235821,"important":0.100127205,"scale":0.09922063,"table":0.09900536,"criteria":0.09749854,"fragile":0.095625944,"<":0.09535279,"##let":0.090213716,"geometry":0.089477435,"width":0.08692814,"circular":0.086610176,"equation":0.08549833,"text":0.083778635,"rectangular":0.08242314,"define":0.08046312,"integration":0.07509139,"percent":0.074962884,"mask":0.06722555,"invariant":0.06651932,"rule":0.06471279,"interface":0.06454182,"which":0.06382854,"distortion":0.0630006,"used":0.057277914,"api":0.052648906,"selection":0.05254191,"property":0.05165951,"quest":0.041882947,"consolidation":0.039784126,"corresponding":0.039220333,"sheet":0.03372968,"##ga":0.03255315,"group":0.024699451,"file":0.0218221,"coefficient":0.0207201,"floating":0.009313471,"avoiding":0.008719347,"modification":0.008462049,"specify":0.008069414,"^":0.00657514,"sort":0.0065727714,"segment":0.0029993332,"blur":0.0024016842,"drawing":0.0019788223,"constant":0.00046719128}},{"text":"  This precision determines the [H3 resolution of the hexagonal cells](https://h3geo.org/docs/core-library/restable) produced by the `geohex` aggregation. The following table maps the H3 resolution for each precision.\n\n  For example, if `<zoom>` is `3` and `grid_precision` is `3`, the precision is `6`. At a precision of `6`, hexagonal cells have an H3 resolution of `2`. If `<zoom>` is `3` and `grid_precision` is `4`, the precision is `7`. At a precision of `7`, hexagonal cells have an H3 resolution of `3`.\n\n  | Precision | Unique tile bins   | H3 resolution | Unique hex bins | Ratio          |\n  | :-------- | :----------------- | :------------ | :-------------- | :------------- |\n  | 1         | 4                  | 0             | 122             | 30.5           |\n  | 2         | 16                 | 0             | 122             | 7.625          |\n  | 3         | 64                 | 1             | 842             | 13.15625       |\n  | 4         | 256                | 1             | 842             | 3.2890625      |\n  | 5         | 1024               | 2             | 5882            | 5.744140625    |\n  | 6         | 4096               | 2             | 5882            | 1.436035156    |\n  | 7         | 16384              | 3             | 41162           | 2.512329102    |\n  | 8         | 65536              | 3             | 41162           | 0.6280822754   |\n  | 9         | 262144             | 4             | 288122          | 1.099098206    |\n  | 10        | 1048576            | 4             | 288122          | 0.2747745514   |\n  | 11        | 4194304            | 5             | 2016842         | 0.4808526039   |\n  | 12        | 16777216           | 6             | 14117882        | 0.8414913416   |\n  | 13        | 67108864           | 6             | 14117882        | 0.2103728354   |\n  | 14        | 268435456          | 7             | 98825162        | 0.3681524172   |\n  | 15        | 1073741824         | 8             | 691776122       | 0.644266719    |\n  | 16        | 4294967296         | 8             | 691776122       | 0.1610666797   |\n  | 17        | 17179869184        | 9             | 4842432842      | 0.2818666889   |\n  | 18        | 68719476736        | 10            | 33897029882     | 0.4932667053   |\n  | 19        | 274877906944       | 11            | 237279209162    | 0.8632167343   |\n  | 20        | 1099511627776      | 11            | 237279209162    | 0.2158041836   |\n  | 21        | 4398046511104      | 12            | 1660954464122   | 0.3776573213   |\n  | 22        | 17592186044416     | 13            | 11626681248842  | 0.6609003122   |\n  | 23        | 70368744177664     | 13            | 11626681248842  | 0.165225078    |\n  | 24        | 281474976710656    | 14            | 81386768741882  | 0.2891438866   |\n  | 25        | 1125899906842620   | 15            | 569707381193162 | 0.5060018015   |\n  | 26        | 4503599627370500   | 15            | 569707381193162 | 0.1265004504   |\n  | 27        | 18014398509482000  | 15            | 569707381193162 | 0.03162511259  |\n  | 28        | 72057594037927900  | 15            | 569707381193162 | 0.007906278149 |\n  | 29        | 288230376151712000 | 15            | 569707381193162 | 0.001976569537 |\n\n  Hexagonal cells don’t align perfectly on a vector tile. ","embeddings":{"0":0.20840438,"3":0.39416346,"6":0.7025136,"7":0.41488755,"13":0.20351544,"41":0.18252017,"43":0.12486511,"256":0.2119458,"288":0.122984916,"411":0.045900628,"1638":0.23228684,"precision":1.92454,"resolution":1.6993173,"##gonal":1.6744976,"zoom":1.6545727,"h":1.6459022,"##xa":1.5962291,"grid":1.584156,"##he":1.5833197,"##ge":1.5650978,"tile":1.5065479,"aggregation":1.469768,"bin":1.4537671,"cells":1.414121,"cell":1.3945504,"##3":1.3926203,"geo":1.2810551,"ratio":1.2498186,"he":1.2103043,"unique":1.1635789,"core":1.1376534,"tiles":1.1068311,"algorithm":1.044895,"rest":1.0432912,"triangular":1.0401568,"##x":1.0331541,"math":0.9475441,"determined":0.93718547,"table":0.93513614,"_":0.90909153,"##o":0.87750936,"##able":0.8713691,"octagonal":0.86186385,"size":0.8566781,"cube":0.8498479,"geometric":0.8495548,"library":0.84923023,"determine":0.8177934,"map":0.80329144,"precise":0.7438675,"grouping":0.7213713,"java":0.70328563,"shaped":0.6944937,"determination":0.68174887,"shape":0.6705737,"chess":0.6560678,"gage":0.64683974,"accuracy":0.6262724,"corner":0.6214244,"if":0.6104782,"maps":0.59661853,"##gon":0.578941,"association":0.5754012,"rectangular":0.5743881,"3d":0.5705757,"spatial":0.56334573,"til":0.54185724,"index":0.5411681,"constant":0.5242817,"length":0.5228956,"memory":0.5084959,"crystal":0.5011396,"mapping":0.49588224,"chip":0.49181587,"square":0.49021703,"ratios":0.48573294,"produced":0.48276687,"dimensions":0.47433117,"display":0.46867365,"resolutions":0.45816904,"chart":0.44784883,"mosaic":0.44082513,"floating":0.4401741,"integer":0.4397953,"excel":0.42656252,"decimal":0.4205919,"pattern":0.41414392,"libraries":0.41176143,"cubic":0.41074437,"column":0.40674937,"calculation":0.39967483,"geometry":0.3927435,"density":0.38986555,"matrix":0.3892902,"determines":0.38803145,"image":0.37739128,"##hedral":0.37646544,"sheet":0.36039045,"cad":0.3591284,"layer":0.35888636,"<":0.35477474,"percent":0.35089934,"cellular":0.35087046,"##25":0.34478182,"hydrogen":0.3394521,"pyramid":0.3355526,"mat":0.324387,"approximate":0.32371008,"group":0.31520668,"predict":0.30553856,"coefficient":0.29668108,"scale":0.29132637,"res":0.28669554,"sharp":0.28595918,"array":0.2856678,"vector":0.27668586,"manipulation":0.26568994,"##hedron":0.26312622,"direction":0.26281014,"color":0.25535268,"consolidation":0.2525204,"circular":0.25049213,"pixel":0.24386977,"analysis":0.24140441,"##26":0.24107465,"images":0.24076594,"##che":0.23780763,"aggregate":0.22799265,"representation":0.22151163,"##tone":0.21719278,"dimensional":0.21542533,"number":0.21009183,"poly":0.20903057,"indicator":0.20693888,"integration":0.20587067,"notation":0.20552568,"##41":0.2025966,"##le":0.20005953,"laser":0.19901386,"equation":0.19871809,"coordinates":0.19811709,"radar":0.19741024,"texture":0.19698645,"third":0.19245394,"##se":0.18499844,"value":0.18391098,"cluster":0.18169934,"gene":0.1795547,"database":0.1630914,"rank":0.16021243,"tess":0.15894829,"##32":0.15764347,"survey":0.15281284,"diameter":0.14918283,"z":0.14877087,"lattice":0.14708641,"data":0.13755962,"quality":0.13550602,"block":0.13523115,"##90":0.12970038,"width":0.12918256,"height":0.12760706,"bit":0.12474515,"mathematical":0.12314229,"doc":0.11956662,"green":0.11561744,"performance":0.11171103,"##h":0.11068802,"irregular":0.10841287,"symmetry":0.10499743,"assembly":0.10191669,"global":0.09881509,"##12":0.0986667,"editor":0.09865633,"structure":0.0934082,"taylor":0.08490761,"oval":0.07925686,"define":0.077197045,"x":0.07529374,"dna":0.060566727,"example":0.0600014,"computation":0.05813299,"network":0.05711208,"tables":0.054850597,"##60":0.054611444,"sphere":0.05086901,"graphic":0.047055084,"unit":0.044258542,"round":0.044097494,"colon":0.038786616,"file":0.03709144,"spiral":0.03437594,"##5":0.03390416,"format":0.031840473,"acceleration":0.02956919,"##51":0.02260617,"layout":0.02146898,"print":0.021385437,"google":0.019596659,"thickness":0.017907841,"oct":0.013276624,"cass":0.011136164,"tower":0.009261267,"peg":0.008811874,"##4":0.0020369987}},{"text":"  Hexagonal cells don’t align perfectly on a vector tile. Some cells may intersect more than one vector tile. To compute the H3 resolution for each precision, Elasticsearch compares the average density of hexagonal bins at each resolution with the average density of tile bins at each zoom level. Elasticsearch uses the H3 resolution that is closest to the corresponding `geotile` density.\n\n- `grid_type`\n\n  (Optional, string) Determines the geometry type for features in the `aggs` layer. In the `aggs` layer, each feature represents a cell in the grid.\n\n  Valid values for `grid_type`\n\n  * `grid` (Default)\n\n    Each feature is a `Polygon` of the cell’s geometry. For a `grid_agg` of `geotile`, the feature is the cell’s bounding box. For a `grid_agg` of `geohex`, the feature is the hexagonal cell’s boundaries.\n\n  * `point`\n\n    Each feature is a `Point` that’s the centroid of the cell.\n\n  * `centroid`\n\n    Each feature is a `Point` that’s the centroid of the data within the cell. For complex geometries, the actual centroid may be outside the cell. In these cases, the feature is set to the closest point to the centroid inside the cell.\n\n* `size`\n\n  (Optional, integer) Maximum number of features to return in the `hits` layer. Accepts `0`-`10000`. Defaults to `10000`. If `0`, results don’t include the `hits` layer.\n\n- `track_total_hits`\n\n  (Optional, integer or Boolean) Number of hits matching the query to count accurately. Defaults to `10000`.\n\n  If `true`, the exact number of hits is returned at the cost of some performance. ","embeddings":{"0":0.30738917,"3":0.26228437,"1000":0.83699006,"elastic":2.031804,"##tile":1.7854291,"zoom":1.7848707,"##sea":1.7184262,"tile":1.6776454,"resolution":1.6174538,"vector":1.6084645,"##xa":1.5706053,"h":1.5342625,"bin":1.5333267,"grid":1.5079933,"##gonal":1.4938906,"precision":1.4524599,"ag":1.4157302,"##he":1.3882658,"density":1.3804338,"cell":1.2958165,"cells":1.2838646,"default":1.2472101,"##3":1.2412655,"geo":1.2359025,"feature":1.2148764,"tiles":1.211602,"features":1.1883416,"he":1.1796354,"##rch":1.1428639,"hit":1.1320188,"hits":1.0712878,"layer":1.0568007,"intersect":1.0471004,"centro":1.0439745,"geometry":1.0389594,"align":1.0279034,"algorithm":1.0131671,"geometric":1.0129226,"alignment":0.97659594,"intersection":0.96513903,"##gs":0.9640127,"average":0.95546645,"bound":0.9527024,"##id":0.93074775,"aligned":0.91016316,"map":0.8917294,"triangular":0.8742696,"optional":0.87368184,"java":0.83628654,"##g":0.83242196,"math":0.8181171,"performance":0.81549656,"box":0.81079733,"amazon":0.80080855,"type":0.7846578,"calculation":0.7804751,"size":0.76527625,"integer":0.7386262,"matching":0.7383849,"compute":0.73340935,"comparison":0.6832589,"valid":0.68318677,"complex":0.67150503,"_":0.6608267,"layers":0.6603921,"cube":0.65750813,"perfectly":0.64819205,"closest":0.6453404,"##gon":0.6299645,"spatial":0.62982696,"til":0.6178938,"count":0.61696774,"query":0.6089778,"##x":0.6017757,"search":0.5948614,"index":0.58507943,"accuracy":0.57296,"excel":0.56594837,"maximum":0.55545956,"center":0.54586035,"##ries":0.54061913,"shape":0.52838117,"precise":0.5274683,"terrain":0.5255452,"pattern":0.5241761,"poly":0.5237725,"boo":0.5054252,"track":0.50534225,"corner":0.50372034,"octagonal":0.49899906,"data":0.4932695,"board":0.49023098,"gage":0.4899548,"perfect":0.47964257,"level":0.4789208,"chart":0.4578249,"dense":0.44656417,"chess":0.44285777,"results":0.44224152,"calculate":0.43080348,"3d":0.430102,"corresponding":0.42772874,"exact":0.4235565,"boundaries":0.42338976,"types":0.42272633,"shaped":0.42056325,"outside":0.41833144,"column":0.40700227,"string":0.4062053,"nearest":0.4042342,"determine":0.4035424,"##met":0.398847,"point":0.39689726,"##lean":0.39431158,"cad":0.39091873,"computation":0.38597038,"value":0.38296992,"dimensions":0.38272214,"radar":0.38187405,"sizes":0.3680275,"scope":0.3680219,"mat":0.35651892,"display":0.35568464,"representation":0.3542449,"measure":0.35110965,"predict":0.3455272,"determined":0.34493136,"represent":0.33988693,"analysis":0.33843493,"compare":0.33750692,"strike":0.32303956,"sheet":0.3174248,"accurate":0.31682664,"crystal":0.28343764,"find":0.28335395,"rectangular":0.28290308,"cubic":0.2745674,"mosaic":0.27394894,"survey":0.2736106,"sort":0.27200055,"test":0.2707841,"direction":0.27056694,"match":0.2683721,"vectors":0.26803806,"square":0.26730105,"overlapping":0.25195184,"tess":0.24791107,"parallel":0.23719001,"scale":0.21949865,"cross":0.21875265,"not":0.21731576,"camera":0.21644843,"floor":0.21505485,"database":0.21471532,"true":0.21274951,"graphic":0.21221541,"result":0.2054422,"multiple":0.19984539,"##0":0.19684166,"##ea":0.18580449,"floating":0.1832239,"geography":0.18160142,"rank":0.17971836,"sea":0.17896998,"values":0.17285131,"vision":0.17213973,"cluster":0.16421822,"color":0.15617727,"sid":0.15528767,"interchange":0.15115465,"layout":0.14986537,"image":0.14875935,"##ing":0.14669138,"target":0.14517531,"google":0.14497589,"##metric":0.14455868,"pixel":0.14218774,"resolutions":0.13876702,"total":0.13864955,"mapping":0.13704015,"ass":0.13528614,"reptiles":0.12770799,"barrier":0.12663937,"graph":0.12404398,"checkpoint":0.12153242,"union":0.119830385,"res":0.11229934,"col":0.109000236,"placement":0.107897505,"maps":0.09894424,"web":0.08945989,"returned":0.08766291,"texture":0.08553554,"edge":0.08471629,"select":0.08436049,"convert":0.08209145,"tiled":0.076512404,"inventory":0.07510864,"symmetry":0.07222245,"network":0.06924382,"deployment":0.064237006,"length":0.06270416,"circular":0.06255121,"ratio":0.062222153,"criteria":0.061578177,"tool":0.060313564,"##che":0.05916657,"dimensional":0.056356866,"table":0.05364184,"fit":0.040217984,"parameters":0.03518844,"topography":0.029957525,"areas":0.029825397,"software":0.02822946,"memory":0.017156053,"domain":0.016935492,"number":0.015736563,"method":0.014703249,"intersecting":0.014155222,"tracking":0.013388843,"model":0.012622348,"approximate":0.010797175,"class":0.010129827,"editor":0.006762002,"area":0.004809122}},{"text":"  If `true`, the exact number of hits is returned at the cost of some performance. If `false`, the response does not include the total number of hits matching the query.\n\n* `with_labels`\n\n  (Optional, Boolean) If true, the hits and aggs layers will contain additional point features representing suggested label positions for the original features.\n\n  * `Point` and `MultiPoint` features will have one of the points selected.\n  * `Polygon` and `MultiPolygon` features will have a single point generated, either the centroid, if it is within the polygon, or another point within the polygon selected from the [sorted triangle-tree](geo-shape.html#geoshape-indexing-approach \"Indexing approach\").\n  * `LineString` features will likewise provide a roughly central point selected from the [triangle-tree](geo-shape.html#geoshape-indexing-approach \"Indexing approach\").\n  * The aggregation results will provide one central point for each aggregation bucket.\n\n  All attributes from the original features will also be copied to the new label features. In addition, the new features will be distinguishable using the tag `_mvt_label_position`.\n\n### Request body\n\n* `aggs`\n\n  (Optional, [aggregation object](search-aggregations.html \"Aggregations\")) [Sub-aggregations](search-aggregations.html#run-sub-aggs \"Run sub-aggregations\") for the `grid_agg`. Supports the following aggregation types:\n\n  * [`avg`](search-aggregations-metrics-avg-aggregation.html \"Avg aggregation\")\n\n  * [`boxplot`](search-aggregations-metrics-boxplot-aggregation.html \"Boxplot aggregation\")\n\n  * [`cardinality`](search-aggregations-metrics-cardinality-aggregation.html \"Cardinality aggregation\")\n\n  * [`extended stats`](search-aggregations-metrics-extendedstats-aggregation.html \"Extended stats aggregation\")\n\n  * [`max`](search-aggregations-metrics-max-aggregation.html \"Max aggregation\")\n\n  * [`median absolute deviation`](search-aggregations-metrics-median-absolute-deviation-aggregation.html \"Median absolute deviation aggregation\")\n\n","embeddings":{"aggregation":1.9777298,"ag":1.6897831,"cardinal":1.480645,"label":1.4725986,"extended":1.4236684,"triangle":1.3584362,"optional":1.3533326,"layers":1.3307767,"html":1.3108727,"layer":1.3040878,"##gs":1.2984971,"hit":1.2938777,"hits":1.2644566,"median":1.2565148,"features":1.2531921,"response":1.2015297,"centro":1.1960022,"false":1.1949488,"query":1.1822443,"approach":1.1820018,"point":1.1814165,"feature":1.1509974,"search":1.1315651,"geo":1.1295944,"labels":1.127054,"absolute":1.092619,"java":1.0919491,"deviation":1.0903523,"##tri":1.0847765,"##gon":1.0836488,"grid":1.0740484,"##g":1.0732559,"metric":1.0705466,"index":1.0685223,"max":1.0677332,"matching":1.0660425,"aggregate":1.0639915,"##pol":1.059549,"av":1.0540535,"true":1.0506369,"performance":1.0462542,"bucket":1.0460856,"##point":1.0412811,"algorithm":1.0282108,"##sha":1.0175567,"exact":1.0035098,"multi":0.9892944,"with":0.9514703,"poly":0.94131804,"##t":0.93104154,"points":0.9152027,"mv":0.90199417,"respond":0.89799756,"box":0.8874066,"shape":0.88142794,"_":0.85650146,"returned":0.85310626,"##lean":0.82628185,"suggested":0.81924444,"new":0.8013557,"triangular":0.79459655,"##pl":0.7784258,"map":0.7765757,"central":0.77461535,"boo":0.7731004,"position":0.76684624,"tree":0.7562955,"statistics":0.7438171,"math":0.7425157,"sorted":0.7410817,"##ot":0.73271775,"##pe":0.73232937,"stats":0.72394866,"if":0.7120806,"selected":0.7015246,"number":0.6879403,"cardinals":0.6877392,"match":0.6740462,"types":0.6728491,"web":0.6625989,"method":0.65932727,"maximum":0.6471849,"attributes":0.63457894,"cluster":0.63382906,"##ng":0.6278431,"##sta":0.6268177,"grouping":0.62496656,"results":0.6205563,"error":0.61845535,"cox":0.61361927,"run":0.6036558,"chart":0.5914229,"positions":0.58448446,"##ing":0.5775742,"placement":0.57434547,"rank":0.5732688,"##id":0.57045215,"google":0.557322,"result":0.54749304,"additional":0.5474885,"tag":0.54541105,"select":0.5227176,"analysis":0.5212447,"selection":0.52085376,"data":0.519685,"return":0.5101225,"request":0.5094786,"burke":0.5005601,"que":0.49381027,"include":0.48846218,"sub":0.4827823,"triangles":0.48046353,"##s":0.4751135,"radar":0.46774766,"lines":0.4545173,"survey":0.4511688,"chess":0.44959858,"amy":0.43848175,"predict":0.43307847,"database":0.42609498,"geometric":0.42264354,"apache":0.42261901,"*":0.4223479,"criteria":0.42174086,"type":0.414991,"total":0.4088158,"graph":0.40512165,"original":0.40383872,"not":0.39227003,"measure":0.39062703,"question":0.38319033,"statistical":0.3783522,"pattern":0.3757928,"##let":0.3697643,"labeling":0.36681107,"cost":0.36349145,"ur":0.36186263,"calculation":0.3616696,"syntax":0.3556736,"bug":0.35185635,"domain":0.35061502,"table":0.345155,"generated":0.3406168,"vector":0.3244613,"sha":0.31956363,"checkpoint":0.31112194,"suggest":0.3053483,"spatial":0.30439883,"format":0.30321553,"generate":0.30004552,"layered":0.29875416,"website":0.28804743,"revision":0.28687614,"network":0.28494135,"target":0.2815388,"center":0.28084642,"class":0.27263936,"change":0.26975298,"sql":0.26814455,"approximate":0.26611924,"forest":0.2648528,"enhanced":0.25713122,"mp":0.25266626,"ass":0.24096908,"tab":0.2379905,"http":0.23781732,"column":0.23563671,"traffic":0.23462138,"server":0.23301649,"group":0.23155817,"competition":0.2284021,"ava":0.21881136,"advanced":0.21575299,"cad":0.21432179,"geography":0.21252958,"'":0.21207425,"consolidation":0.21010284,"##ity":0.20983304,"answer":0.2090534,"resolution":0.20681073,"xml":0.2053955,"##tra":0.2007809,"shapes":0.19715217,"sid":0.19094566,"corresponding":0.19043949,"rule":0.18990617,"extend":0.18878733,"editor":0.1830376,"characteristics":0.18183799,"association":0.17516084,"api":0.1735228,"##gonal":0.17089473,"tier":0.16907161,"test":0.1678007,"node":0.16257784,"single":0.15920666,"report":0.15690763,"line":0.15196724,"interface":0.1518847,"copy":0.15111212,"variance":0.14786458,"success":0.14727779,"bot":0.14147055,"provide":0.1397216,"multiple":0.1329628,"tex":0.13203631,"introduced":0.13171451,"rate":0.12914926,"samples":0.12555003,"gage":0.12551335,"inventory":0.1243752,"popularity":0.12417918,"custom":0.12222238,"graphic":0.12188009,"script":0.1215226,"coordinates":0.121441625,"indicator":0.11525717,"size":0.1148296,"technique":0.114570886,"`":0.112205684,"##tie":0.109661825,"quantity":0.108851634,"cod":0.10681584,"si":0.10424672,"tags":0.10164665,"online":0.10088781,"sort":0.09875613,"weighted":0.08844385,"exactly":0.08780192,"latest":0.086437,"attribute":0.08166308,"representation":0.07277426,"display":0.072272025,"links":0.07149078,"floating":0.07104874,"bid":0.070494525,"detection":0.06994801,"code":0.06820791,"distribution":0.06800557,"anal":0.060604762,"distinguish":0.060059663,"implementation":0.05687955,"#":0.055432376,"middle":0.053889472,"maps":0.053829037,"some":0.053735953,"mat":0.049938865,"count":0.04342827,"php":0.042034753,"areas":0.041410696,"mapping":0.037104078,"valid":0.028987216,"implement":0.02749073,"labeled":0.023763489,"popular":0.022099655,"addition":0.020974496,"v":0.02029697,"segment":0.019730262,"site":0.019651717,"yes":0.018005492,"earlier":0.017892737,"support":0.016913222,"terrain":0.01587467,"par":0.015218924,"sorting":0.010967568,"miscellaneous":0.010963913,"actual":0.010190246,"navigation":0.008417957,"mark":0.005261384,"array":0.0045611393,"##au":0.0036595773,"excel":0.0017665509,"square":0.0007955247}},{"text":"\n  * [`min`](search-aggregations-metrics-min-aggregation.html \"Min aggregation\")\n\n  * [`percentile`](search-aggregations-metrics-percentile-aggregation.html \"Percentiles aggregation\")\n\n  * [`percentile-rank`](search-aggregations-metrics-percentile-rank-aggregation.html \"Percentile ranks aggregation\")\n\n  * [`stats`](search-aggregations-metrics-stats-aggregation.html \"Stats aggregation\")\n\n  * [`sum`](search-aggregations-metrics-sum-aggregation.html \"Sum aggregation\")\n\n  * [`value count`](search-aggregations-metrics-valuecount-aggregation.html \"Value count aggregation\")\n\n    The aggregation names can’t start with `_mvt_`. The `_mvt_` prefix is reserved for internal aggregations.\n\n* `exact_bounds`\n\n  (Optional, Boolean) If `false`, the `meta` layer’s feature is the bounding box of the tile. Defaults to `false`.\n\n  If `true`, the `meta` layer’s feature is a bounding box resulting from a [`geo_bounds`](search-aggregations-metrics-geobounds-aggregation.html \"Geo-bounds aggregation\") aggregation. The aggregation runs on `<field>` values that intersect the `<zoom>/<x>/<y>` tile with `wrap_longitude` set to `false`. The resulting bounding box may be larger than the vector tile.\n\n* `extent`\n\n  (Optional, integer) Size, in pixels, of a side of the tile. Vector tiles are square with equal sides. Defaults to `4096`.\n\n* `buffer`\n\n  (Optional, integer) Size, in pixels, of a clipping buffer outside the tile. This allows renderers to avoid outline artifacts from geometries that extend past the extent of the tile. Defaults to `5`.\n\n* `fields`\n\n  (Optional, array of strings and objects) Fields to return in the `hits` layer. Supports wildcards (`*`).\n\n  This parameter does not support fields with [array values](array.html \"Arrays\"). Fields with array values may return inconsistent results.\n\n  You can specify fields in the array as a string or object.\n\n  Properties of `fields` objects\n\n  * `field`\n\n","embeddings":{"40":1.0531507,"aggregation":2.126644,"tile":1.8686079,"##ile":1.8031242,"min":1.6008434,"percent":1.4678296,"sum":1.4172902,"html":1.3592217,"tiles":1.3574756,"rank":1.3519198,"bound":1.3237635,"longitude":1.3108886,"search":1.300255,"array":1.2776258,"box":1.2627597,"metric":1.2520854,"geo":1.248055,"count":1.2047174,"aggregate":1.1690514,"zoom":1.1605853,"default":1.1529018,"mv":1.1450481,"ranks":1.1420473,"optional":1.1348513,"vector":1.1139729,"extent":1.1035798,"java":1.0866308,"wild":1.070181,"layer":1.0560228,"meta":1.0525689,"buffer":1.0456231,"fields":1.0322037,"##unt":1.0306805,"outline":0.98056936,"stats":0.97883964,"value":0.9724581,"algorithm":0.9402108,"parameter":0.9390134,"artifacts":0.8914844,"false":0.8783306,"arrays":0.8705015,"##t":0.8597005,"statistics":0.8293103,"field":0.81280094,"math":0.798307,"grouping":0.79004174,"cent":0.7757694,"names":0.7638229,"specify":0.7343155,"til":0.7309634,"feature":0.72842044,"pixels":0.7220273,"parameters":0.72042614,"wrap":0.7185405,"integer":0.7052582,"clip":0.69374925,"layers":0.69200116,"##ing":0.6913613,"index":0.68003017,"square":0.6787642,"intersection":0.67181623,"##co":0.66618645,"equal":0.664643,"##bound":0.64707595,"bounds":0.62958854,"size":0.6258584,"render":0.61696047,"chart":0.61532205,"artifact":0.6050652,"google":0.5978521,"internal":0.5938114,"prefix":0.58750343,"ranked":0.5853353,"cluster":0.58344465,"latitude":0.5696211,"analysis":0.5694314,"mosaic":0.56785727,"##ries":0.5658463,"%":0.56402045,"resolution":0.55016005,"statistical":0.5380102,"side":0.5210142,"web":0.5173393,"map":0.5026399,"grid":0.50016457,"data":0.4991545,"boxes":0.4927197,"cox":0.4893869,"##ping":0.48357564,"intersect":0.48018035,"sides":0.45221812,"boo":0.44198006,"database":0.43624318,"##s":0.43347234,"board":0.42522362,"y":0.4171213,"pixel":0.41282284,"apache":0.41268343,"website":0.40207997,"association":0.39882836,"consolidation":0.39680532,"mr":0.393337,"_":0.39138767,"mp":0.3855554,"chess":0.38296813,"table":0.38076013,"values":0.37680548,"images":0.3593327,"excel":0.35452658,"extend":0.3533302,"column":0.35278088,"measure":0.35206026,"class":0.3399213,"sid":0.33670262,"features":0.32938838,"rendering":0.32541442,"editor":0.32540616,"tab":0.32322985,"group":0.30481067,"name":0.30216816,"##cards":0.30077037,"overlapping":0.29999247,"error":0.29657695,"run":0.29113138,"geometric":0.2876476,"image":0.2875637,"calculation":0.28511354,"##card":0.2700272,"stat":0.26394022,"survey":0.26309296,"spatial":0.261917,"string":0.2536311,"extended":0.25045463,"si":0.24716353,"scope":0.24298514,"domain":0.24270725,"burke":0.23605226,"tiled":0.23158513,"inconsistent":0.22474606,"syntax":0.22461808,"border":0.22008827,"direction":0.21155281,"*":0.20777732,"corner":0.20479259,"format":0.19955026,"##let":0.1876707,"find":0.18674015,"radar":0.18281104,"script":0.18012434,"pattern":0.17956297,"##9":0.17822772,"##6":0.1705273,"sql":0.17033075,"limit":0.16799198,"sort":0.16715167,"notation":0.16567491,"xml":0.16172597,"display":0.15397498,"site":0.15178803,"php":0.15093203,"legacy":0.14829798,"range":0.1471678,"navigation":0.14425038,"distribution":0.14204513,"multiple":0.1418816,"mat":0.13671008,"gage":0.1339538,"cod":0.13306142,"hit":0.12937395,"##lier":0.12573233,"swarm":0.12546013,"cad":0.12425656,"rule":0.12307209,"unit":0.122452326,"graphic":0.11764973,"reserved":0.11641973,"boundaries":0.11082333,"dimensions":0.099312164,"inventory":0.097079866,"manipulation":0.09231759,"tex":0.08940102,"api":0.08635455,"length":0.08521736,"geography":0.083793655,"return":0.08363063,"exact":0.076396994,"deployment":0.069454245,"sums":0.06916217,"tier":0.06808665,"report":0.06312192,"maximum":0.059405982,"quest":0.059138592,"meridian":0.05752363,"accounting":0.056807134,"results":0.055963095,"graph":0.053194217,"score":0.051749054,"code":0.046643753,"##met":0.042485002,"file":0.04193382,"mark":0.037202857,"sizes":0.035412263,"page":0.034221124,"popularity":0.032616153,"minute":0.025314493,"checkpoint":0.025276253,"squares":0.0180364,"runs":0.016761893,"matrix":0.015562638,"mining":0.01464651,"of":0.013718018,"server":0.012916943,"mandatory":0.009552366,"cross":0.009487895,"bart":0.009188981,"category":0.007962036,"geographic":0.0052304333,"scale":0.0027995226,"floating":0.0015587573}},{"text":"\n    (Required, string) Field to return. Supports wildcards (`*`).\n\n  * `format`\n\n    (Optional, string) Format for date and geospatial fields. Other field data types do not support this parameter.\n\n    [`date`](date.html \"Date field type\") and [`date_nanos`](date_nanos.html \"Date nanoseconds field type\") fields accept a [date format](mapping-date-format.html \"format\"). [`geo_point`](geo-point.html \"Geopoint field type\") and [`geo_shape`](geo-shape.html \"Geoshape field type\") fields accept:\n\n    * `geojson` (default)\n\n      [GeoJSON](http://www.geojson.org)\n\n    * `wkt`\n\n      [Well Known Text](https://en.wikipedia.org/wiki/Well-known_text_representation_of_geometry)\n\n    * `mvt(<spec>)`\n\n      Binary [Mapbox vector tile](https://docs.mapbox.com/vector-tiles/specification). The API returns the tile as a base64-encoded string. The `<spec>` has the format `<zoom>/<x>/<y>` with two optional suffixes: `@<extent>` and/or `:<buffer>`. For example, `2/0/1` or `2/0/1@4096:5`.\n\n      `mvt` parameters\n\n      * `<zoom>`\n\n        (Required, integer) Zoom level for the tile. Accepts `0`-`29`.\n\n      * `<x>`\n\n        (Required, integer) X coordinate for the tile.\n\n      * `<y>`\n\n        (Required, integer) Y coordinate for the tile.\n\n      * `<extent>`\n\n        (Optional, integer) Size, in pixels, of a side of the tile. Vector tiles are square with equal sides. Defaults to `4096`.\n\n      * `<buffer>`\n\n        (Optional, integer) Size, in pixels, of a clipping buffer outside the tile. This allows renderers to avoid outline artifacts from geometries that extend past the extent of the tile. Defaults to `5`.\n\n* `grid_agg`\n\n  (Optional, string) Aggregation used to create a grid for the `<field>`.\n\n  Valid values for `grid_agg`\n\n  * `geotile` (Default)\n\n    [`geotile_grid`](search-aggregations-bucket-geotilegrid-aggregation.html \"Geotile grid aggregation\") aggregation.\n\n  * `geohex`\n\n    [`geohex_grid`](search-aggregations-bucket-geohexgrid-aggregation.html \"Geohex grid aggregation\") aggregation.\n\n* `grid_precision`\n\n","embeddings":{"0":0.17927144,"5":0.7454637,"29":0.7051284,"39":0.15876046,"40":1.2211586,"42":0.097593054,"64":0.30703565,"tile":2.0550628,"date":1.6946815,"zoom":1.5616546,"geo":1.5226328,"tiles":1.503556,"field":1.4768386,"api":1.4491403,"wild":1.4473096,"nano":1.3363254,"format":1.3349295,"map":1.3122783,"fields":1.3057774,"optional":1.2927932,"ag":1.2783014,"vector":1.2603284,"##js":1.2492591,"##box":1.2151779,"types":1.2049674,"parameter":1.1972923,"##on":1.1729381,"return":1.1687751,"buffer":1.1646091,"data":1.1537645,"dates":1.1393926,"##point":1.1042408,"##kt":1.1027441,"string":1.0941344,"type":1.0822405,"##sp":1.0577592,"##ati":1.0545175,"##64":1.0360057,"default":1.0338894,"##sha":1.0269693,"grid":1.0187037,"extent":1.0107353,"html":0.99218196,"mv":0.98979574,"mapping":0.9844244,"parameters":0.9697308,"box":0.959581,"shape":0.94619364,"encoded":0.92938817,"y":0.91293657,"##pe":0.8960298,"##cards":0.89360666,"java":0.8856047,"integer":0.8807336,"clip":0.877719,"returned":0.86656225,"w":0.8337772,"##card":0.8271845,"til":0.8132771,"accept":0.81041574,"required":0.7772725,"spec":0.7763259,"*":0.77246153,"text":0.7691307,"render":0.7689,"maps":0.76378745,"formats":0.7637647,"outline":0.73426974,"_":0.7339307,"mosaic":0.71235895,"size":0.70428616,"artifacts":0.7038499,"##t":0.70327026,"point":0.6905284,"@":0.68606955,"##ping":0.6680719,"##g":0.6395004,"survey":0.6143023,"require":0.60725486,"##6":0.5881797,"algorithm":0.5875531,"representation":0.5832637,"index":0.56948054,"##se":0.56353,"requirements":0.56062907,"equal":0.556118,"sid":0.54313725,"square":0.5391786,"gps":0.5278776,"mandatory":0.5171643,"apache":0.51382565,"##9":0.50602657,"website":0.4847246,"math":0.47324905,"x":0.47224385,"resolution":0.46059978,"outside":0.45897844,"file":0.45614633,"script":0.45355964,"spatial":0.4501406,"coordinates":0.44805998,"display":0.4435669,"##j":0.4391611,"rendering":0.4246224,"editor":0.4221686,"coordinate":0.42159244,"dated":0.41217092,"geometric":0.4120457,"##s":0.4102712,"interface":0.40594128,"software":0.40078825,"must":0.3981061,"google":0.39026397,"timeline":0.38563937,"card":0.37882912,"support":0.37449142,"images":0.36048838,"artifact":0.35990164,"domain":0.351962,"database":0.33876795,"requirement":0.32724813,"returning":0.32409507,"board":0.31959635,"nan":0.3129878,"tex":0.31117103,"/":0.29446852,"protocol":0.28301573,"image":0.28040335,"##ries":0.27425453,"dimensions":0.26762712,"site":0.25952926,"geometry":0.25436473,"length":0.25343412,"not":0.24864864,"code":0.24537686,"##field":0.24475491,"binary":0.24307135,"specification":0.24197884,"legacy":0.23182425,"radar":0.2315282,"pixels":0.22926898,"chart":0.22600296,"zone":0.22350207,"web":0.21300368,"syntax":0.2078241,"necessary":0.20620885,"day":0.20530397,"scope":0.2051489,"cad":0.20464095,"##con":0.2039671,"satellite":0.2032063,"explorer":0.1984188,"geography":0.19180065,"class":0.1890827,"network":0.18256426,"shapes":0.17504397,"terrain":0.17373405,"server":0.17241597,"j":0.1699774,"sizes":0.16827664,"characters":0.16637556,"pixel":0.16597386,"year":0.16526231,"terra":0.16502835,"aggregation":0.1640603,"mp":0.16217966,"pattern":0.1554635,"side":0.14955798,"property":0.14942391,"gage":0.14858696,"doc":0.14702642,"mat":0.14639229,"camera":0.12770359,"time":0.11539367,"specifications":0.11403316,"sides":0.113033496,"certification":0.106713094,"notation":0.10653811,"land":0.09818119,"base":0.0958257,"3d":0.09177591,"tiled":0.088814676,"period":0.08824949,"http":0.08328463,"encoding":0.08320226,"shaped":0.077879235,"method":0.06726144,"cutting":0.06557616,"bot":0.06556076,"##k":0.062277712,"`":0.060456872,"##ons":0.059656456,"jack":0.04653213,"tab":0.0393126,"graphic":0.035888962,"cipher":0.034974933,"calendar":0.034697935,")":0.034494452,"files":0.028708903,"document":0.026895938,"button":0.026647221,"version":0.021017922,"excel":0.019544289,"layout":0.017219212,"mark":0.016676782,"marble":0.015410986,"layer":0.014543008,"sequences":0.008085614}},{"text":"\n  (Optional, integer) Precision level for cells in the `grid_agg`. Accepts `0`-`8`. Defaults to `8`. If `0`, results don’t include the `aggs` layer.\n\n  Grid precision for `geotile`\n\n  For a `grid_agg` of `geotile`, you can use cells in the `aggs` layer as tiles for lower zoom levels. `grid_precision` represents the additional zoom levels available through these cells. The final precision is computed by as follows:\n\n  `<zoom> + grid_precision`\n\n  For example, if `<zoom>` is `7` and `grid_precision` is `8`, then the `geotile_grid` aggregation will use a precision of `15`. The maximum final precision is `29`.\n\n  The `grid_precision` also determines the number of cells for the grid as follows:\n\n  `(2^grid_precision) x (2^grid_precision)`\n\n  For example, a value of `8` divides the tile into a grid of 256 x 256 cells. The `aggs` layer only contains features for cells with matching data.\n\n  Grid precision for `geohex`\n\n  For a `grid_agg` of `geohex`, Elasticsearch uses `<zoom>` and `grid_precision` to calculate a final precision as follows:\n\n  `<zoom> + grid_precision`\n\n  This precision determines the [H3 resolution of the hexagonal cells](https://h3geo.org/docs/core-library/restable) produced by the `geohex` aggregation. The following table maps the H3 resolution for each precision.\n\n  For example, if `<zoom>` is `3` and `grid_precision` is `3`, the precision is `6`. At a precision of `6`, hexagonal cells have an H3 resolution of `2`. If `<zoom>` is `3` and `grid_precision` is `4`, the precision is `7`. At a precision of `7`, hexagonal cells have an H3 resolution of `3`.\n\n","embeddings":{"0":0.7045093,"3":0.19145244,"6":0.14410466,"7":0.08512912,"8":0.79373693,"15":0.46154794,"29":0.7534191,"256":0.29866052,"##tile":1.9340247,"precision":1.902844,"zoom":1.8451562,"grid":1.8189623,"elastic":1.7057717,"ag":1.5202291,"tile":1.5187912,"##sea":1.3791176,"geo":1.3719951,"optional":1.3661759,"aggregation":1.3531513,"##ge":1.3468528,"default":1.3380774,"##he":1.3191289,"tiles":1.2663885,"##g":1.2255087,"##gonal":1.2179136,"final":1.214115,"resolution":1.2027724,"##xa":1.1786665,"h":1.1748989,"integer":1.0977623,"##rch":1.0941423,"cells":1.0442097,"_":1.0386276,"level":1.0385909,"layer":1.0206144,"maximum":1.0152626,"core":1.0058159,"algorithm":0.9924071,"java":0.9874246,"cell":0.9712128,"amazon":0.93703514,"##gs":0.93022555,"math":0.9187605,"##3":0.90574163,"matching":0.8933165,"map":0.8221708,"calculation":0.82187194,"##able":0.77657264,"accuracy":0.73217344,"triangular":0.72922575,"index":0.6931027,"excel":0.68122786,"layers":0.6412955,"precise":0.6369502,"if":0.60595906,"determine":0.590291,"table":0.58520436,"determined":0.5847698,"he":0.57851964,"##o":0.57178015,"scope":0.5611551,"result":0.55038506,"cube":0.5423949,"reptiles":0.5417622,"size":0.53849036,"rest":0.53844756,"mat":0.5344656,"geometric":0.52589613,"decimal":0.5187677,"data":0.51649743,"zero":0.5035071,"chart":0.4906945,"results":0.48858273,"format":0.47052357,"gage":0.4685809,"levels":0.4684746,"divide":0.4680187,"finished":0.4564755,"calculate":0.4496804,"include":0.4437845,"search":0.4427005,"til":0.43602574,"number":0.42442042,"##tra":0.41223833,"graphic":0.41100433,"editor":0.40941203,"accept":0.40533984,"chess":0.4046408,"display":0.39875278,"doc":0.39387816,"survey":0.39289328,"spatial":0.38262564,"pattern":0.38007027,"apache":0.37091932,"shape":0.36818632,"##x":0.36802223,"division":0.35897803,"library":0.35615698,"value":0.35374573,"scale":0.34730288,"percent":0.34689048,"sid":0.32693037,"dimensions":0.32073268,"lower":0.31354937,"sharp":0.29698247,"google":0.27842167,"aggregate":0.27782094,"computed":0.2753006,"html":0.2674724,"predict":0.2648161,"length":0.25853,"column":0.25775582,"camera":0.24282217,"cad":0.24202591,"rank":0.23938496,"grouping":0.23671575,"class":0.22418824,"web":0.22385989,"define":0.2234912,"forest":0.21319625,"sheet":0.20710005,"notation":0.19663484,"global":0.18477172,"^":0.18030891,"vector":0.17029506,"terrain":0.17001088,"square":0.16342534,"specify":0.15405317,"octagonal":0.15177184,"determination":0.15019216,"fragile":0.1427583,"sort":0.13907598,"representation":0.13652903,"graph":0.13577645,"available":0.12892692,"##di":0.116527215,"floating":0.11301423,"shaped":0.112425804,"analysis":0.11238383,"computation":0.11192135,"radar":0.10588539,"rectangular":0.10552491,"3d":0.10288924,"len":0.10186814,"fields":0.090075485,"mapping":0.0885151,"vision":0.08729789,"layout":0.08584137,"gps":0.08278326,"sha":0.07988626,"additional":0.07931952,"constant":0.07373148,"##se":0.07344984,"geography":0.063451126,"coefficient":0.06198151,"multiple":0.06133514,"minimum":0.059807718,"match":0.059679702,"determines":0.058966212,"corner":0.057145182,"max":0.049704205,"##ga":0.048092216,"association":0.04452629,"##che":0.04143483,"syntax":0.039077386,"which":0.03764656,"board":0.03493959,"circular":0.0307816,"equation":0.030294014,"where":0.029255845,"mining":0.028140103,"parameters":0.028019907,"features":0.025783487,"tess":0.015530596,"cubic":0.014806029,"checkpoint":0.01444584}},{"text":"\n  | Precision | Unique tile bins   | H3 resolution | Unique hex bins | Ratio          |\n  | :-------- | :----------------- | :------------ | :-------------- | :------------- |\n  | 1         | 4                  | 0             | 122             | 30.5           |\n  | 2         | 16                 | 0             | 122             | 7.625          |\n  | 3         | 64                 | 1             | 842             | 13.15625       |\n  | 4         | 256                | 1             | 842             | 3.2890625      |\n  | 5         | 1024               | 2             | 5882            | 5.744140625    |\n  | 6         | 4096               | 2             | 5882            | 1.436035156    |\n  | 7         | 16384              | 3             | 41162           | 2.512329102    |\n  | 8         | 65536              | 3             | 41162           | 0.6280822754   |\n  | 9         | 262144             | 4             | 288122          | 1.099098206    |\n  | 10        | 1048576            | 4             | 288122          | 0.2747745514   |\n  | 11        | 4194304            | 5             | 2016842         | 0.4808526039   |\n  | 12        | 16777216           | 6             | 14117882        | 0.8414913416   |\n  | 13        | 67108864           | 6             | 14117882        | 0.2103728354   |\n  | 14        | 268435456          | 7             | 98825162        | 0.3681524172   |\n  | 15        | 1073741824         | 8             | 691776122       | 0.644266719    |\n  | 16        | 4294967296         | 8             | 691776122       | 0.1610666797   |\n  | 17        | 17179869184        | 9             | 4842432842      | 0.2818666889   |\n  | 18        | 68719476736        | 10            | 33897029882     | 0.4932667053   |\n  | 19        | 274877906944       | 11            | 237279209162    | 0.8632167343   |\n  | 20        | 1099511627776      | 11            | 237279209162    | 0.2158041836   |\n  | 21        | 4398046511104      | 12            | 1660954464122   | 0.3776573213   |\n  | 22        | 17592186044416     | 13            | 11626681248842  | 0.6609003122   |\n  | 23        | 70368744177664     | 13            | 11626681248842  | 0.165225078    |\n  | 24        | 281474976710656    | 14            | 81386768741882  | 0.2891438866   |\n  | 25        | 1125899906842620   | 15            | 569707381193162 | 0.5060018015   |\n  | 26        | 4503599627370500   | 15            | 569707381193162 | 0.1265004504   |\n  | 27        | 18014398509482000  | 15            | 569707381193162 | 0.03162511259  |\n  | 28        | 72057594037927900  | 15            | 569707381193162 | 0.007906278149 |\n  | 29        | 288230376151712000 | 15            | 569707381193162 | 0.001976569537 |\n\n  Hexagonal cells don’t align perfectly on a vector tile. Some cells may intersect more than one vector tile. To compute the H3 resolution for each precision, Elasticsearch compares the average density of hexagonal bins at each resolution with the average density of tile bins at each zoom level. Elasticsearch uses the H3 resolution that is closest to the corresponding `geotile` density.\n\n* `grid_type`\n\n  (Optional, string) Determines the geometry type for features in the `aggs` layer. In the `aggs` layer, each feature represents a cell in the grid.\n\n  Valid values for `grid_type`\n\n  * `grid` (Default)\n\n","embeddings":{"0":0.03058472,"3":0.21821284,"42":0.07064883,"256":0.32427153,"480":0.086711295,"1717":0.16876847,"bin":1.9232016,"tile":1.8948084,"precision":1.6915559,"ratio":1.5754541,"unique":1.5589892,"resolution":1.480019,"##3":1.4532384,"tiles":1.3849996,"h":1.3393036,"##x":1.3231876,"he":1.1233857,"ratios":0.9970865,"til":0.8333275,"index":0.80161726,"size":0.7669968,"java":0.71588284,"algorithm":0.6623403,"##xa":0.6552279,"custom":0.6525769,"math":0.61638844,"decimal":0.577229,"display":0.5606496,"##26":0.5578925,"##5":0.5375848,"precise":0.5337077,"accuracy":0.5224398,"pattern":0.5200113,"length":0.5153475,"cube":0.51518863,"tiled":0.5111185,"gage":0.47297433,"dimensions":0.45058912,"##2":0.4465644,"yard":0.44018877,"memory":0.42825034,"sizes":0.40632194,"resolutions":0.40491024,"font":0.40293992,"|":0.4015957,"layout":0.39338946,"bit":0.39097002,"identification":0.39040518,"proportion":0.3893364,"percent":0.389282,"software":0.38597158,"inventory":0.38479602,"chart":0.38454333,"symbol":0.38388652,"alphabet":0.3797845,"##86":0.37768883,"chess":0.37008783,"hash":0.3676693,"##4":0.36666998,"sid":0.36191228,"##tone":0.3553558,"error":0.3552115,"##s":0.35230544,"cad":0.3463703,"mosaic":0.33854297,"width":0.3379602,"##25":0.30581394,"file":0.30147803,"popularity":0.28944027,"html":0.28784043,"z":0.28027877,"database":0.27925503,"sort":0.27244404,"unicode":0.265769,"##z":0.25694168,"square":0.25553143,"keyboard":0.2526384,"##41":0.25175926,"geometric":0.242346,"matching":0.2418096,"array":0.24105582,"number":0.2382095,"height":0.23377004,"zoom":0.2273695,"equation":0.22725524,"vector":0.20857248,"##42":0.20232098,"hardware":0.18561736,"##h":0.18381497,"mat":0.18218023,"which":0.1766061,"x":0.1763356,"##29":0.17308816,"code":0.17118718,"peg":0.16910906,"guide":0.16682807,"map":0.16663434,"_":0.16419424,"chip":0.14903352,"pipe":0.14792965,"scale":0.1395071,"log":0.13576375,"playback":0.13445601,"locker":0.13153738,"tower":0.13024263,"clock":0.13018015,"board":0.12741974,"category":0.12357917,"color":0.12133414,"3d":0.11355048,"##ex":0.10785587,"apache":0.10657219,"wheel":0.10382,"integer":0.09483119,"binary":0.0925781,"##85":0.092354976,"calculation":0.086646035,"##24":0.08331732,"value":0.0830331,"list":0.08123398,"stock":0.08080348,"crypt":0.08063502,"type":0.07310806,"analysis":0.07152396,"data":0.06466642,"##28":0.06349163,"shape":0.06264123,"table":0.062266845,"random":0.05869623,"density":0.05426362,"buffer":0.051472586,"##16":0.04759686,"rank":0.043285236,"rate":0.039103407,"format":0.03702516,"##39":0.03462735,"image":0.027854366,"diameter":0.024553716,"##1":0.022083798,"bunker":0.021314839,"res":0.017386053,"combination":0.0154774245,"different":0.0114431,":":0.010290541,"coefficient":0.009900984,"##56":0.0062536746}},{"text":"\n    Each feature is a `Polygon` of the cell’s geometry. For a `grid_agg` of `geotile`, the feature is the cell’s bounding box. For a `grid_agg` of `geohex`, the feature is the hexagonal cell’s boundaries.\n\n  * `point`\n\n    Each feature is a `Point` that’s the centroid of the cell.\n\n  * `centroid`\n\n    Each feature is a `Point` that’s the centroid of the data within the cell. For complex geometries, the actual centroid may be outside the cell. In these cases, the feature is set to the closest point to the centroid inside the cell.\n\n* `query`\n\n  (Optional, object) [Query DSL](query-dsl.html \"Query DSL\") used to filter documents for the search.\n\n* `runtime_mappings`\n\n  (Optional, object of objects) Defines one or more [runtime fields](runtime-search-request.html \"Define runtime fields in a search request\") in the search request. These fields take precedence over mapped fields with the same name.\n\n  Properties of `runtime_mappings` objects\n\n  * `<field-name>`\n\n    (Required, object) Configuration for the runtime field. The key is the field name.\n\n    Properties of `<field-name>`\n\n    * `type`\n\n      (Required, string) [Field type](mapping-types.html \"Field data types\"), which can be any of the following:\n\n      * `boolean`\n      * `composite`\n      * `date`\n      * `double`\n      * `geo_point`\n      * `ip`\n      * `keyword`\n      * `long`\n      * [`lookup`](runtime-retrieving-fields.html#lookup-runtime-fields \"Retrieve fields from related indices\")\n\n    * `script`\n\n      (Optional, string) [Painless script](modules-scripting-using.html \"How to write scripts\") executed at query time. The script has access to the entire context of a document, including the original `_source` and any mapped fields plus their values.\n\n      This script must include `emit` to return calculated values. For example:\n\n      ```\n","embeddings":{"##tile":2.0332458,"centro":1.9060804,"grid":1.7467985,"script":1.658713,"ag":1.6483862,"cell":1.5859092,"##gonal":1.5686672,"feature":1.5651687,"##he":1.5282513,"point":1.5116043,"##xa":1.4523983,"geo":1.4003814,"features":1.3246495,"optional":1.2933432,"##g":1.2830914,"field":1.2709932,"search":1.2437783,"bound":1.2403733,"poly":1.2342038,"box":1.2093676,"fields":1.2009825,"##time":1.1603038,"html":1.1470644,"##id":1.1060739,"##less":1.0889603,"modules":1.0445174,"center":1.0329976,"##l":1.0273241,"##gon":1.0088507,"cells":1.0064397,"query":0.9965799,"##x":0.98467255,"run":0.9696741,"triangular":0.95509076,"mapping":0.9532126,"index":0.9500324,"pain":0.93979675,"precedence":0.9254622,"composite":0.9244674,"complex":0.9169888,"document":0.9114688,"geometry":0.9047199,"scripts":0.900043,"closest":0.8962444,"excel":0.8898917,"_":0.88135153,"math":0.86968476,"java":0.8656982,"cad":0.83728164,"he":0.83175284,"geometric":0.8310831,"filter":0.8291796,"boundaries":0.82869565,"object":0.8149956,"##ries":0.80529743,"algorithm":0.80020607,"##eving":0.7974388,"outside":0.79661447,"mapped":0.7965891,"map":0.7954337,"##met":0.7824314,"ds":0.7798318,"reptiles":0.77514493,"types":0.76393807,"data":0.7600624,"ip":0.7590928,"##tri":0.7473118,"##lean":0.7382755,"boo":0.7322101,"retrieve":0.7223344,"documents":0.715882,"module":0.7084267,"##up":0.68365145,"indices":0.6807202,"shape":0.66001385,"calculation":0.65410155,"sheet":0.6534892,"octagonal":0.6276012,"geography":0.59428436,"double":0.58985525,"time":0.5892193,"nearest":0.5778558,"##ing":0.57449186,"survey":0.5692802,"request":0.56760365,"##tian":0.5523756,"column":0.5453952,"analysis":0.5428053,"type":0.54179454,"look":0.5395536,"configuration":0.5292085,"chart":0.5221064,"string":0.51304823,"database":0.506464,"maps":0.5016382,"boundary":0.49826714,"spatial":0.49719062,"cluster":0.49453354,"inside":0.48920548,"boxes":0.47571835,"source":0.47568375,"objects":0.46936575,"define":0.46901676,"properties":0.4634248,"google":0.45793328,"terrain":0.45394373,"filtering":0.44425762,"layer":0.44300306,"shaped":0.4416424,"key":0.43120167,"costa":0.42018953,"graphic":0.39499575,"##gs":0.39491487,"mat":0.39185214,"retrieval":0.38935888,"cent":0.3803032,"##che":0.37993753,"vector":0.37669352,"long":0.35963827,"each":0.3574734,"domain":0.35710612,"calculated":0.35042587,"##word":0.34855276,"points":0.34160417,"corner":0.33942103,"retrieved":0.33788836,"cellular":0.3360337,"sid":0.3356756,"##tra":0.33349925,"node":0.32998556,"access":0.328443,"syntax":0.3262592,"cube":0.32401025,"find":0.322344,"editor":0.32087088,"pattern":0.31633452,"##le":0.29250994,"filters":0.28819185,"rectangular":0.28675336,"checkpoint":0.28469494,"shuttle":0.27771422,"software":0.26771557,"called":0.26406994,"diagram":0.25976345,"keys":0.25833684,"where":0.2558524,"que":0.25341904,"middle":0.25341505,"tool":0.24533282,"quest":0.2377472,"##hedral":0.23498946,"value":0.23346163,"emi":0.23034403,"plot":0.22872534,"tab":0.22433932,"matrix":0.22064114,"within":0.21728085,"symbol":0.20843768,"square":0.20606694,"names":0.20576529,"values":0.20324901,"graph":0.20055227,"searching":0.19870254,"topography":0.19841108,"class":0.19639166,"peg":0.18775754,"chess":0.17641325,"doc":0.17618118,"3d":0.17403129,"table":0.17117815,"pains":0.17077866,"complicated":0.16827463,"is":0.16776653,"pyramid":0.16617669,"xml":0.16330335,"sql":0.16133009,"display":0.15342133,"context":0.15308915,"property":0.15294082,"date":0.15112586,"network":0.14549497,"code":0.13974296,"##s":0.13934004,"circular":0.13659455,"command":0.12753141,"formula":0.12699188,"format":0.12499935,"c":0.12413316,"featured":0.12349225,"amy":0.11453761,"radar":0.11349216,"file":0.11175208,"mosaic":0.106726594,"related":0.10625902,"apache":0.10340428,"priority":0.10273166,"border":0.09948259,"scope":0.09727133,"function":0.096888155,"##ile":0.09640059,"##point":0.09531865,"calculate":0.09008452,"area":0.08934847,"satellite":0.08722622,"web":0.086583614,"gps":0.07907833,"##se":0.0729977,"mathematical":0.07102453,"##try":0.07039332,"coordinates":0.070089504,"navigation":0.0652605,"coordinate":0.0641801,"text":0.06392293,"segment":0.059627928,"fragile":0.058526244,"floating":0.05787696,"perimeter":0.057039455,"free":0.05631822,"ark":0.053970117,"##t":0.053080045,"api":0.049568765,"mandatory":0.04632376,"gene":0.04070808,"representation":0.04040691,"doubles":0.04039042,"dh":0.03759088,"files":0.036328882,"unit":0.034540173,"axis":0.027974004,"binding":0.025530426,"criteria":0.01903657,"near":0.01442751,"geographic":0.013710375,"##hedron":0.012954011,"question":0.0076970896,"gage":0.0067513455,"integration":0.004860965}},{"text":"      ```\n      \"script\": \"emit(doc['@timestamp'].value.dayOfWeekEnum.toString())\"\n      ```\n\n* `size`\n\n  (Optional, integer) Maximum number of features to return in the `hits` layer. Accepts `0`-`10000`. Defaults to `10000`. If `0`, results don’t include the `hits` layer.\n\n* `sort`\n\n  (Optional, array of [sort objects](sort-search-results.html \"Sort search results\")) Sorts features in the `hits` layer.\n\n  By default, the API calculates a bounding box for each feature. It sorts features based on this box’s diagonal length, from longest to shortest.\n\n* `track_total_hits`\n\n  (Optional, integer or Boolean) Number of hits matching the query to count accurately. Defaults to `10000`.\n\n  If `true`, the exact number of hits is returned at the cost of some performance. If `false`, the response does not include the total number of hits matching the query.\n\n* `with_labels`\n\n  (Optional, Boolean) If true, the hits and aggs layers will contain additional point features representing suggested label positions for the original features.\n\n  * `Point` and `MultiPoint` features will have one of the points selected.\n  * `Polygon` and `MultiPolygon` features will have a single point generated, either the centroid, if it is within the polygon, or another point within the polygon selected from the [sorted triangle-tree](geo-shape.html#geoshape-indexing-approach \"Indexing approach\").\n  * `LineString` features will likewise provide a roughly central point selected from the [triangle-tree](geo-shape.html#geoshape-indexing-approach \"Indexing approach\").\n  * The aggregation results will provide one central point for each aggregation bucket.\n\n  All attributes from the original features will also be copied to the new label features. ","embeddings":{"0":0.6260025,"1000":1.1454045,"2000":0.17933612,"api":1.7347382,"script":1.7339808,"emi":1.6126921,"aggregation":1.5050386,"default":1.489596,"diagonal":1.4476663,"geo":1.4387591,"triangle":1.4201659,"features":1.4157908,"feature":1.3802761,"label":1.3770574,"html":1.3576057,"sort":1.3343055,"hit":1.3313892,"hits":1.3214238,"bound":1.3209671,"layer":1.3186373,"##tam":1.3129952,"approach":1.3104126,"optional":1.2952139,"search":1.2623156,"box":1.2575294,"day":1.2566789,"doc":1.2332877,"index":1.2038499,"##ring":1.1887575,"##sha":1.1853817,"##pol":1.175533,"##tri":1.1692611,"##of":1.1629975,"layers":1.1543916,"shape":1.1376431,"point":1.1305233,"centro":1.1283233,"java":1.0856315,"##gs":1.0707787,"size":1.06723,"track":1.0659586,"ag":1.064985,"longest":1.0568576,"bucket":1.0308414,"##st":1.0268621,"labels":1.0267403,"@":1.0245823,"algorithm":1.0208563,"length":0.99458754,"times":0.9925226,"maximum":0.9604875,"scripts":0.95744723,"shortest":0.9369355,"map":0.9228666,"##pe":0.9185326,"##week":0.9179205,"##point":0.91432166,"value":0.9088175,"##gon":0.90446746,"query":0.89585614,"calculation":0.8820272,"##um":0.8659001,"tree":0.8624019,"attributes":0.860576,"integer":0.84453404,"poly":0.84230435,"##en":0.83383465,"matching":0.83227295,"sorted":0.8314537,"triangular":0.82857764,"points":0.81372523,"accept":0.8002338,"results":0.7729597,"aggregate":0.76467013,"central":0.7533879,"suggested":0.74316794,"multi":0.73782736,"survey":0.72196865,"false":0.71575123,"response":0.7118885,"##ing":0.70304346,"count":0.69402254,"##t":0.6859813,"method":0.66578156,"math":0.664304,"array":0.66128457,"result":0.65993303,"total":0.6582245,"google":0.6574261,"return":0.6474973,"week":0.6460206,"apache":0.6345391,"sizes":0.63196987,"sorting":0.6108167,"##0":0.5881011,"position":0.57260484,"returned":0.5653008,"attribute":0.5582406,"number":0.5464697,"##lean":0.5450837,"calculate":0.5443501,"triangles":0.54406995,"sid":0.54011506,"new":0.53527254,"shaped":0.51897335,"web":0.5161052,"data":0.5104256,"precision":0.50576603,"shapes":0.49544936,"radar":0.4954352,"spatial":0.48962098,"website":0.481469,"document":0.48075545,"##g":0.47849002,"geometric":0.4725517,"##ng":0.46594387,"##id":0.4652386,"domain":0.4632453,"_":0.45780635,"original":0.44874805,"tracking":0.4429282,"predict":0.43800998,"editor":0.43363097,"placement":0.4282324,"generated":0.42559755,"eli":0.42455095,"terrain":0.42419317,"copy":0.41817546,"center":0.4160379,"selected":0.41527882,"rank":0.40129107,"boo":0.39765373,"chart":0.3947792,"gps":0.3920625,"cluster":0.38984963,"accuracy":0.38609233,"tags":0.3842534,"time":0.37174156,"generate":0.36716086,"respond":0.3636949,"mountain":0.3598014,"lines":0.35658392,"bug":0.35593078,"decimal":0.35516462,"vector":0.35479316,"find":0.35456982,"mapping":0.35243082,"analysis":0.3479494,"##day":0.34753886,"site":0.34462222,"geography":0.3362153,"database":0.32600737,"strike":0.3256564,"format":0.32553324,"network":0.32133764,"match":0.31952596,"cross":0.3173721,"of":0.31288964,"cad":0.3117435,"##p":0.30960044,"limit":0.3091014,"accurate":0.30726343,"approximate":0.3034252,"samples":0.30275962,"marker":0.29560232,"grouping":0.29261974,"000":0.28768963,"##tra":0.284191,"maps":0.28372455,"square":0.27893618,"explorer":0.27856576,"sami":0.27826744,"zero":0.27699986,"performance":0.27591196,"positions":0.27577835,"grid":0.2722561,"file":0.2716525,"tool":0.26715997,"featured":0.2649321,"resolution":0.26437226,"graph":0.2635917,"pattern":0.25709423,"protocol":0.2565682,"ob":0.25600377,"sha":0.25410616,"tutor":0.25164795,"indexed":0.25033677,"apr":0.24703988,"largest":0.24113506,"php":0.23618923,"selection":0.23515145,"exact":0.22326057,"checkpoint":0.22264771,"forest":0.22058013,"additional":0.21770132,"roughly":0.21046008,"mining":0.20432487,"weighted":0.2038164,"criteria":0.20095116,"consolidation":0.19896784,"scope":0.19876195,"coordinates":0.19640048,"deployment":0.19621591,"long":0.19568606,"routing":0.19491687,"spread":0.19036154,"sonar":0.18895727,"select":0.18495513,"characteristics":0.18432707,"software":0.18192485,"geographic":0.17878138,"syntax":0.1735151,"excel":0.17328797,"satellite":0.17301878,"target":0.17260629,"zoom":0.16675521,"bot":0.16674997,"##gonal":0.16491464,"boxes":0.16464004,"suggest":0.16449282,"(":0.16140486,"interest":0.16133781,"popularity":0.16092442,"ass":0.15985984,"provide":0.15826969,"interface":0.15774244,"hitting":0.15641545,"dimensions":0.15386297,"pyramid":0.15173467,"halle":0.14202651,"tex":0.13769467,"unit":0.13312946,"emission":0.13085234,"broadcast":0.12979534,"buffer":0.1261725,"multiple":0.12564266,"class":0.12398711,"sample":0.11991318,"processing":0.11573244,"ajax":0.11423203,"##zone":0.109293416,"server":0.1069883,"question":0.104241244,"tab":0.10228019,"hunting":0.10189419,"chess":0.09955414,"xml":0.09741052,"legacy":0.09547448,"sorts":0.09365008,"corner":0.08442184,"scale":0.083953805,"http":0.07999433,"line":0.078927755,"error":0.07746991,"log":0.069683984,"image":0.06647248,"detection":0.06368929,"mark":0.06216323,"max":0.061784625,"display":0.057547715,"graphic":0.054101463,"knowledge":0.05318031,"inventory":0.052174244,"implement":0.052152067,"edgar":0.050639216,"sunday":0.0497371,"mat":0.049588956,"include":0.04715789,"##script":0.043857012,"objects":0.039753653,"score":0.034225732,"cube":0.034069743,"gage":0.033077236,"segment":0.0326015,"recommended":0.020825299,"with":0.020250244,"weekly":0.0188376,"diamond":0.017309431,"code":0.016251002,"allowed":0.012416327,"online":0.0080549875,"integration":0.005935424,"to":0.0029960054,"area":0.0013930626,"custom":0.0003486264,"zone":0.00008999896}},{"text":"  All attributes from the original features will also be copied to the new label features. In addition, the new features will be distinguishable using the tag `_mvt_label_position`.\n\n### Response\n\nReturned vector tiles contain the following data:\n\n* `hits`\n\n  (object) Layer containing results for the `geo_bounding_box` query.\n\n  Properties of `hits`\n\n  * `extent`\n\n    (integer) Size, in pixels, of a side of the tile. Vector tiles are square with equal sides.\n\n  - `version`\n\n    (integer) Major version number of the [Mapbox vector tile specification](https://github.com/mapbox/vector-tile-spec).\n\n  - `features`\n\n    (array of objects) Array of features. Contains a feature for each `<field>` value that matches the `geo_bounding_box` query.\n\n    Properties of `features` objects\n\n    * `geometry`\n\n      (object) Geometry for the feature.\n\n      Properties of `geometry`\n\n      * `type`\n\n        (string) Geometry type for the feature. Valid values are:\n\n        * `UNKNOWN`\n        * `POINT`\n        * `LINESTRING`\n        * `POLYGON`\n\n      * `coordinates`\n\n        (array of integers or array of arrays) Tile coordinates for the feature.\n\n    * `properties`\n\n      (object) Properties for the feature.\n\n      Properties of `properties`\n\n      * `_id`\n\n        (string) Document `_id` for the feature’s document.\n\n      * `_index`\n\n        (string) Name of the index for the feature’s document.\n\n      * `<field>`\n\n        Field value. Only returned for fields in the `fields` parameter.\n\n    * `type`\n\n      (integer) Identifier for the feature’s geometry type. Values are:\n\n      * `1` (`POINT`)\n      * `2` (`LINESTRING`)\n      * `3` (`POLYGON`)\n\n* `aggs`\n\n  (object) Layer containing results for the `grid_agg` aggregation and its sub-aggregations.\n\n  Properties of `aggs`\n\n  * `extent`\n\n    (integer) Size, in pixels, of a side of the tile. Vector tiles are square with equal sides.\n\n  * `version`\n\n    (integer) Major version number of the [Mapbox vector tile specification](https://github.com/mapbox/vector-tile-spec).\n\n  * `features`\n\n","embeddings":{"tile":1.9396913,"vector":1.939513,"label":1.8144804,"tiles":1.6068739,"ag":1.5669584,"map":1.5120189,"mv":1.4588922,"##box":1.4136856,"features":1.4018533,"box":1.3998783,"bound":1.3913785,"feature":1.3909642,"geo":1.3785243,"aggregation":1.2609546,"grid":1.1804345,"##t":1.1550007,"attributes":1.153369,"hit":1.1243899,"##tri":1.1232771,"array":1.1151658,"##ub":1.0649319,"layer":1.0563738,"hits":1.0485626,"copy":1.0438454,"position":1.0221587,"integer":1.0184737,"extent":1.0094898,"returned":1.0063452,"tag":0.9974176,"new":0.98816186,"response":0.9801851,"##gs":0.9528995,"fields":0.9408404,"attribute":0.9021361,"java":0.90114945,"index":0.88846666,"distinguish":0.88311005,"original":0.87317294,"properties":0.87238705,"spec":0.8660886,"specification":0.8574784,"data":0.85312843,"geometric":0.8523925,"##g":0.8436017,"object":0.8338682,"equal":0.8140441,"##th":0.8124197,"square":0.8031165,"field":0.7953941,"##ing":0.7886487,"geometry":0.78255004,"query":0.7673532,"til":0.766012,"valid":0.764653,"copied":0.76321757,"type":0.76093453,"_":0.7542102,"gi":0.75221646,"layers":0.74651444,"maps":0.73600614,"algorithm":0.7342236,"coordinates":0.7248193,"respond":0.71393335,"size":0.71215624,"version":0.6886356,"math":0.6769195,"poly":0.6738311,"labels":0.67123884,"property":0.663286,"placement":0.64643264,"point":0.64229304,"##gon":0.62643224,"specifications":0.62498695,"document":0.62414265,"v":0.61654025,"sid":0.6161141,"mapping":0.6155858,"side":0.59528244,"objects":0.5870069,"tags":0.58296573,"terrain":0.5573616,"sides":0.5500323,"results":0.5476884,"contain":0.5466439,"board":0.5361134,"value":0.5299482,"change":0.52357984,"unknown":0.51451117,"integers":0.5042306,"values":0.5020914,"mp":0.4860297,"survey":0.47880852,"vectors":0.4752911,"copying":0.47493306,"lines":0.47157872,"editor":0.46314058,"binding":0.461353,"pixels":0.44340163,"parameters":0.441415,"boxes":0.44030166,"cad":0.43777826,"spatial":0.43546328,"geography":0.43343323,"display":0.422836,"types":0.41426942,"matching":0.4072139,"result":0.40509406,"dimensions":0.4031355,"characteristics":0.4007172,"return":0.40007746,"arrays":0.39127654,"resolution":0.3855076,"corner":0.3807572,"chart":0.374393,"revision":0.3728516,"bug":0.37133205,"images":0.36960334,"shape":0.36797726,"image":0.3670905,"mosaic":0.35916525,"rc":0.35303342,"string":0.34586164,"##able":0.34214097,"file":0.3343208,"html":0.3316531,"pattern":0.33146185,"match":0.32939628,"mat":0.32817593,"parameter":0.32165504,"recognize":0.31872767,"distinguished":0.31350824,"format":0.3092501,"length":0.30884495,"labeled":0.30804247,"criteria":0.30143932,"mountain":0.28956538,"interface":0.2836085,"code":0.26538584,"##ng":0.26426435,"domain":0.2638263,"area":0.25674295,"database":0.25381035,"cube":0.242898,"custom":0.24111961,"pixel":0.23000255,"gps":0.22310264,"apache":0.22263482,"3d":0.21598767,"error":0.21212478,"tab":0.21031983,"software":0.19952819,"addition":0.1985367,"tex":0.1982834,"graphic":0.19658127,"sizes":0.19205716,"class":0.19017804,"triangular":0.18974102,"https":0.18121372,"line":0.17883521,"mark":0.17141016,"tool":0.16881044,"explorer":0.16082516,"server":0.16070457,"strike":0.15607314,"featured":0.1542145,"replace":0.15296292,"legacy":0.15184517,"geographic":0.14302386,"grouping":0.14184384,"mask":0.13897908,"#":0.13712028,"xml":0.13522741,"archive":0.12981252,"##gonal":0.12557548,"id":0.12510496,"latest":0.12389612,"aggregate":0.11505743,"terra":0.113987744,"zone":0.11040037,"inherited":0.10661141,"tiled":0.10472167,"modification":0.10394475,"will":0.098092034,"google":0.09045267,"recognized":0.09024552,"measure":0.08832753,"number":0.08786154,"certification":0.0874601,"labeling":0.085794546,"scope":0.07610462,"differentiation":0.07484376,"checkpoint":0.074605584,"differentiate":0.074297406,"default":0.068137206,"versions":0.062430482,"blog":0.062219575,"boundary":0.062100492,"recognition":0.061392315,"network":0.060807597,"cross":0.059572335,"selection":0.058216672,"##ifier":0.05606894,"analysis":0.053194556,"gage":0.051475417,"tess":0.051241573,"inventory":0.039973933,"radar":0.034377668,"knowledge":0.028040655,"identification":0.027805788,"online":0.025142344,"answer":0.022946773,"##tra":0.01583959,"similar":0.015565807,"plot":0.011494246,"separation":0.010618851,"now":0.005849031,"introduced":0.0051686475,"old":0.005131052,"layout":0.004557223,"following":0.0010226503}},{"text":"\n    (array of objects) Array of features. Contains a feature for each cell of the grid.\n\n    Properties of `features` objects\n\n    * `geometry`\n\n      (object) Geometry for the feature.\n\n      Properties of `geometry`\n\n      * `type`\n\n        (string) Geometry type for the feature. Valid values are:\n\n        * `UNKNOWN`\n        * `POINT`\n        * `LINESTRING`\n        * `POLYGON`\n\n      * `coordinates`\n\n        (array of integers or array of arrays) Tile coordinates for the feature.\n\n    * `properties`\n\n      (object) Properties for the feature.\n\n      Properties of `properties`\n\n      * `_count`\n\n        (long) Count of the cell’s documents.\n\n      * `_key`\n\n        (string) Bucket key of the cell in the format `<zoom>/<x>/<y>`.\n\n      * `<sub-aggregation>.value`\n\n        Sub-aggregation results for the cell. Only returned for sub-aggregations in the `aggs` parameter.\n\n    * `type`\n\n      (integer) Identifier for the feature’s geometry type. Values are:\n\n      * `1` (`POINT`)\n      * `2` (`LINESTRING`)\n      * `3` (`POLYGON`)\n\n* `meta`\n\n  (object) Layer containing metadata for the request.\n\n  Properties of `meta`\n\n  * `extent`\n\n    (integer) Size, in pixels, of a side of the tile. Vector tiles are square with equal sides.\n\n  * `version`\n\n    (integer) Major version number of the [Mapbox vector tile specification](https://github.com/mapbox/vector-tile-spec).\n\n  * `features`\n\n    (array of objects) Contains a feature for a bounding box.\n\n    Properties of `features` objects\n\n    * `geometry`\n\n      (object) Geometry for the feature.\n\n      Properties of `geometry`\n\n      * `type`\n\n        (string) Geometry type for the feature. Valid values are:\n\n        * `UNKNOWN`\n        * `POINT`\n        * `LINESTRING`\n        * `POLYGON`\n\n      * `coordinates`\n\n        (array of integers or array of arrays) Tile coordinates for the feature.\n\n    * `properties`\n\n      (object) Properties for the feature.\n\n      Properties of `properties`\n\n      * `_shards.failed`\n\n        (integer) Number of shards that failed to execute the search. See the search API’s [`shards`](search-search.html#search-api-shards) response property.\n\n      * `_shards.skipped`\n\n","embeddings":{"tile":1.7605906,"grid":1.6971685,"ag":1.6261449,"array":1.5477593,"valid":1.5180095,"shards":1.5120627,"feature":1.4723922,"zoom":1.4446176,"aggregation":1.4422457,"##box":1.4415666,"vector":1.3793223,"map":1.3659265,"features":1.3587995,"properties":1.3238832,"tiles":1.32078,"unknown":1.2651038,"api":1.2563201,"geometry":1.2095416,"objects":1.1938177,"bucket":1.1921,"##gs":1.1764894,"box":1.1652142,"object":1.1268382,"bound":1.1240013,"##tri":1.1212136,"geometric":1.110318,"values":1.0902541,"cell":1.087771,"search":1.0803041,"poly":1.0685115,"property":1.0323153,"value":1.0290577,"java":0.9967709,"type":0.98417705,"sub":0.9825977,"##gon":0.9634012,"point":0.9526703,"string":0.92935973,"integer":0.90973854,"failed":0.8997445,"arrays":0.86301905,"spec":0.8602029,"count":0.84739727,"html":0.8418215,"coordinates":0.8357895,"specification":0.83324623,"fragments":0.829541,"integers":0.8119481,"fragment":0.79944736,"##ub":0.78560257,"request":0.78516406,"algorithm":0.7435303,"math":0.7408852,"types":0.71683407,"##th":0.7087307,"metadata":0.7077354,"##ng":0.7035951,"response":0.6737007,"aggregate":0.6722732,"excel":0.661074,"cells":0.65961015,"maps":0.6435694,"format":0.63940597,"class":0.6190922,"y":0.61126685,"failure":0.6056153,"gi":0.59729224,"shape":0.59055585,"meta":0.5904921,"specifications":0.58479375,"layer":0.5736356,"parameter":0.57308567,"##g":0.5678019,"index":0.54901475,"size":0.54565704,"key":0.53607017,"lines":0.5318442,"extent":0.5311058,"version":0.5081094,"square":0.5073457,"contain":0.49637762,"crystal":0.4927872,"_":0.48275834,"parameters":0.48093686,"mat":0.4777847,"google":0.470796,"##ing":0.4683914,"til":0.46269038,"cube":0.45957187,"documents":0.4518739,"equal":0.4442729,"chart":0.43103126,"data":0.42875782,"results":0.41333413,"mapping":0.4103237,"acceptable":0.39965925,"geo":0.39775184,"https":0.3963769,"respond":0.3915625,"spatial":0.38089487,"fail":0.37689388,"criteria":0.36188346,"items":0.36035436,"of":0.35893863,"(":0.35660386,"images":0.3539704,"pattern":0.34881225,"document":0.34600055,"sheet":0.3446583,"sid":0.33916113,"database":0.33717558,"returned":0.33551323,"broken":0.33174533,"error":0.32406223,"column":0.31967714,"result":0.31956926,"board":0.31058556,"display":0.30859932,"fragmented":0.30666655,"contains":0.3004973,"skip":0.2960789,"length":0.2858123,"keys":0.28347775,"editor":0.2605934,"grouping":0.26030034,"coordinate":0.26019466,"pieces":0.254563,"vectors":0.2519269,"code":0.24239072,"graph":0.23776074,"range":0.2361688,"##tra":0.23404828,"line":0.23385383,"dimensions":0.22463894,"pixels":0.22047275,"corner":0.2161232,"image":0.21536112,"find":0.21061905,"domain":0.21010584,"resolution":0.20313236,"number":0.20293678,"characteristics":0.19299152,"web":0.18375972,"cox":0.17433676,"analysis":0.17150447,"table":0.17020929,"layers":0.16953366,"consolidation":0.16900054,"rank":0.16317365,"long":0.16274875,"tess":0.15011449,"file":0.1489385,"apache":0.14769284,"bug":0.14687379,"##gonal":0.14419888,"fragmentation":0.1395466,"featured":0.13699108,"block":0.1362042,"cad":0.13422297,"chess":0.13409017,"definition":0.12986454,"tab":0.1294169,"sha":0.1277977,"mountain":0.12567483,"cluster":0.12525791,"mosaic":0.10452905,"compatible":0.09723607,"network":0.09262091,"certification":0.090348884,"not":0.08876134,"node":0.084795035,"points":0.08230545,"mesh":0.077748545,"item":0.07669183,"una":0.076229334,"sql":0.07301487,"amy":0.06788005,"syntax":0.058226794,"marble":0.05149523,"group":0.04750933,"scale":0.0471389,"jordan":0.03483702,"http":0.032833166,"category":0.028424717,"framework":0.025400965,"scope":0.023752429,"measure":0.019514712,"side":0.012294696,"survey":0.008621494,"unit":0.008563937}},{"text":"\n        (integer) Number of shards that skipped the search. See the search API’s [`shards`](search-search.html#search-api-shards) response property.\n\n      * `_shards.successful`\n\n        (integer) Number of shards that executed the search successfully. See the search API’s [`shards`](search-search.html#search-api-shards) response property.\n\n      * `_shards.total`\n\n        (integer) Total number of shards that required querying, including unallocated shards. See the search API’s [`shards`](search-search.html#search-api-shards) response property.\n\n      * `aggregations._count.avg`\n\n        (float) Average `_count` value for features in the `aggs` layer.\n\n      * `aggregations._count.count`\n\n        (integer) Number of unique `_count` values for features in the `aggs` layer.\n\n      * `aggregations._count.max`\n\n        (float) Largest `_count` value for features in the `aggs` layer.\n\n      * `aggregations._count.min`\n\n        (float) Smallest `_count` value for features in the `aggs` layer.\n\n      * `aggregations._count.sum`\n\n        (float) Sum of `_count` values for features in the `aggs` layer.\n\n      * `aggregations.<sub-aggregation>.avg`\n\n        (float) Average value for the sub-aggregation’s results.\n\n      * `aggregations.<agg_name>.count`\n\n        (integer) Number of unique values from the sub-aggregation’s results.\n\n      * `aggregations.<agg_name>.max`\n\n        (float) Largest value from the sub-aggregation’s results.\n\n      * `aggregations.<agg_name>.min`\n\n        (float) Smallest value from the sub-aggregation’s results.\n\n      * `aggregations.<agg_name>.sum`\n\n        (float) Sum of values for the sub-aggregation’s results.\n\n      * `hits.max_score`\n\n        (float) Highest document `_score` for the search’s hits.\n\n      * `hits.total.relation`\n\n        (string) Indicates whether `hits.total.value` is accurate or a lower bound. Possible values are:\n\n        * `eq`\n\n          Accurate\n\n        * `gte`\n\n          Lower bound\n\n      * `hits.total.value`\n\n        (integer) Total number of hits for the search.\n\n      * `timed_out`\n\n        (Boolean) If `true`, the search timed out before completion. Results may be partial or empty.\n\n      * `took`\n\n","embeddings":{"shards":1.8296304,"ag":1.7643661,"aggregation":1.6574875,"api":1.6424301,"search":1.4467231,"integer":1.3859379,"##gs":1.3795497,"skip":1.3756242,"##g":1.3748605,"property":1.2629586,"features":1.2378733,"sum":1.2014647,"sub":1.1731243,"layer":1.1644667,"feature":1.1627991,"html":1.1572407,"java":1.1390095,"bound":1.1261498,"count":1.1245003,"float":1.1223902,"response":1.1047043,"fragment":1.0824379,"score":1.0681572,"successful":1.0109848,"skipped":1.0087589,"av":0.988418,"hit":0.9736711,"unique":0.9495922,"floating":0.94727767,"algorithm":0.93789166,"aggregate":0.9215486,"##llo":0.917028,"fragments":0.9094213,"accurate":0.90816087,"hits":0.88910246,"total":0.86074847,"una":0.8554174,"success":0.85035616,"index":0.8405124,"layers":0.8314912,"respond":0.830452,"smallest":0.8024825,"##cated":0.7982837,"average":0.7941579,"skipping":0.7866679,"value":0.7616793,"crystal":0.7572206,"##q":0.74015224,"cluster":0.7130608,"fragmented":0.70912594,"properties":0.7048581,"rank":0.69152915,"accuracy":0.6911286,"number":0.66692555,"broken":0.6667279,"math":0.66503626,"largest":0.6559764,"error":0.65055555,"document":0.64205587,"web":0.6165805,"google":0.6038783,"results":0.5815951,"apache":0.5730885,"database":0.5715229,"graph":0.5607653,"_":0.5580776,"values":0.5387614,"result":0.53586555,"query":0.5336254,"max":0.5292453,"maximum":0.5263774,"fragmentation":0.52605325,"domain":0.5238556,"min":0.5159663,"successfully":0.49427795,"bug":0.48835877,"indicator":0.4749015,"string":0.46428823,"analysis":0.45799533,"missing":0.45793846,"sid":0.45383567,"map":0.450971,"cox":0.4423359,"gt":0.44151545,"sha":0.41599676,"data":0.41365674,"amy":0.41276193,"execution":0.41060838,"pattern":0.40970442,"checkpoint":0.40809688,"raven":0.40607354,"quest":0.40285355,"grouping":0.3855454,"cube":0.38039276,"class":0.37551123,"searching":0.37284192,"sql":0.372752,"chess":0.37151912,"bot":0.3569379,"chart":0.35342246,"criteria":0.35307178,"scores":0.32703388,"pieces":0.3186715,"glass":0.31684342,"table":0.31527382,"darius":0.30841437,"lower":0.30828702,"tile":0.3080332,"##cation":0.30344537,"calculation":0.29640052,"percent":0.29636717,"archive":0.29347238,"php":0.26925766,"website":0.26166302,"consolidation":0.25831679,"list":0.25737056,"executed":0.25495642,"##ga":0.24838004,"strike":0.2399203,"popularity":0.23792171,"inventory":0.2365812,"amazon":0.23495355,"rating":0.23467699,"ava":0.23144506,"highest":0.22881685,"small":0.22298236,"symbol":0.21967581,"problem":0.21896958,"size":0.21472946,"tier":0.21048827,"predict":0.20976838,"shattered":0.20269404,"hash":0.19765534,"find":0.19591765,"chance":0.184404,"resolution":0.18386278,"multiple":0.18338954,"ur":0.18202859,"partition":0.17815022,"hunting":0.17673588,"trial":0.17237715,"zoom":0.16793413,"##da":0.16776039,"binding":0.1673326,"reaction":0.16677035,"node":0.16295408,"minimal":0.16123493,"match":0.15649077,"stop":0.15606682,"integers":0.15034725,"interface":0.14372869,"##rd":0.14139417,"online":0.13968812,"survey":0.13927667,"require":0.13211006,"precision":0.13000022,"swarm":0.12852496,"gage":0.12799029,"bypass":0.12460361,"code":0.12195407,"samples":0.116842486,"que":0.11274418,"##cate":0.11209337,"pool":0.110988386,"crystals":0.109833375,"question":0.1081128,"mark":0.1076904,"square":0.10567155,"tab":0.105412275,"http":0.101254374,"burke":0.09582169,"certification":0.09523022,"category":0.09180016,"radar":0.0892654,"missed":0.08795302,"mining":0.07488568,"forest":0.07135559,"ban":0.06979272,"log":0.06836991,"xml":0.06727526,"framework":0.066960245,"column":0.06590847,"scale":0.06345851,"display":0.06338299,"mat":0.06143413,"youtube":0.058522534,"featured":0.05524819,"edge":0.05341732,"sort":0.050599102,"instance":0.04567049,"decimal":0.042655334,"##gy":0.04218368,"statistics":0.041276067,"notation":0.039590385,"execute":0.03644142,"nan":0.034037482,"network":0.032989927,"tree":0.030934637,"##s":0.030554544,"len":0.029783627,"test":0.029273326,"ka":0.029200504,"longest":0.028284391,"measure":0.026952568,"failed":0.026632829,"association":0.023731358,"coefficient":0.02369783,"competition":0.02325884,"ratio":0.020576118,"mp":0.016333569,"group":0.013409427,"matching":0.009717659,"server":0.00882948,"si":0.00520968,"panda":0.0005934861,"grouped":0.00008093983}},{"text":"\n        (integer) Milliseconds it took Elasticsearch to run the search. See the search API’s [`took`](search-search.html#search-api-took) response property.\n\n    * `type`\n\n      (integer) Identifier for the feature’s geometry type. Values are:\n\n      * `1` (`POINT`)\n      * `2` (`LINESTRING`)\n      * `3` (`POLYGON`)\n\n### Examples\n\nThe following requests create the `museum` index and add several geospatial `location` values.\n\n```\nresp = client.indices.create(\n    index=\"museums\",\n    mappings={\n        \"properties\": {\n            \"location\": {\n                \"type\": \"geo_point\"\n            },\n            \"name\": {\n                \"type\": \"keyword\"\n            },\n            \"price\": {\n                \"type\": \"long\"\n            },\n            \"included\": {\n                \"type\": \"boolean\"\n            }\n        }\n    },\n)\nprint(resp)\n\nresp1 = client.bulk(\n    index=\"museums\",\n    refresh=True,\n    operations=[\n        {\n            \"index\": {\n                \"_id\": \"1\"\n            }\n        },\n        {\n            \"location\": \"POINT (4.912350 52.374081)\",\n            \"name\": \"NEMO Science Museum\",\n            \"price\": 1750,\n            \"included\": True\n        },\n        {\n            \"index\": {\n                \"_id\": \"2\"\n            }\n        },\n        {\n            \"location\": \"POINT (4.901618 52.369219)\",\n            \"name\": \"Museum Het Rembrandthuis\",\n            \"price\": 1500,\n            \"included\": False\n        },\n        {\n            \"index\": {\n                \"_id\": \"3\"\n            }\n        },\n        {\n            \"location\": \"POINT (4.914722 52.371667)\",\n            \"name\": \"Nederlands Scheepvaartmuseum\",\n            \"price\": 1650,\n            \"included\": True\n        },\n        {\n            \"index\": {\n                \"_id\": \"4\"\n            }\n        },\n        {\n            \"location\": \"POINT (4.914722 52.371667)\",\n            \"name\": \"Amsterdam Centre for Architecture\",\n            \"price\": 0,\n            \"included\": True\n        }\n    ],\n)\nprint(resp1)\n```\n\n```\nresponse = client.indices.create(\n  index: 'museums',\n  body: {\n    mappings: {\n      properties: {\n        location: {\n          type: 'geo_point'\n        },\n        name: {\n          type: 'keyword'\n        },\n        price: {\n          type: 'long'\n        },\n        included: {\n          type: 'boolean'\n        }\n      }\n    }\n  }\n)\nputs response\n\nresponse = client.bulk(\n  index: 'museums',\n  refresh: true,\n  body: [\n    {\n      index: {\n        _id: '1'\n      }\n    },\n    {\n      location: 'POINT (4.912350 52.374081)',\n      name: 'NEMO Science Museum',\n      price: 1750,\n      included: true\n    },\n    {\n      index: {\n        _id: '2'\n      }\n    },\n    {\n      location: 'POINT (4.901618 52.369219)',\n      name: 'Museum Het Rembrandthuis',\n      price: 1500,\n      included: false\n    },\n    {\n      index: {\n        _id: '3'\n      }\n    },\n    {\n      location: 'POINT (4.914722 52.371667)',\n      name: 'Nederlands Scheepvaartmuseum',\n      price: 1650,\n      included: true\n    },\n    {\n      index: {\n        _id: '4'\n      }\n    },\n    {\n      location: 'POINT (4.914722 52.371667)',\n      name: 'Amsterdam Centre for Architecture',\n      price: 0,\n      included: true\n    }\n  ]\n)\nputs response\n```\n\n```\nconst response = await client.indices.create({\n  index: \"museums\",\n  mappings: {\n    properties: {\n      location: {\n","embeddings":{"52":0.08270216,"90":0.4916471,"91":0.63347185,"1500":0.779358,"1650":0.052487504,"1750":0.3605073,"elastic":1.9710181,"museum":1.8320056,"point":1.615595,"##mo":1.5972211,"integer":1.5444884,"feature":1.5441169,"##sea":1.5108745,"index":1.4780861,"museums":1.4748133,"api":1.4642214,"ne":1.3435192,"response":1.3323742,"client":1.3323206,"search":1.3233588,"amsterdam":1.3172737,"##sp":1.2442237,"price":1.240869,"geometry":1.205277,"take":1.169954,"property":1.1670684,"##ise":1.1346447,"dutch":1.1341014,"geometric":1.1336051,"geo":1.1133301,"##mus":1.1108367,"science":1.088097,"took":1.0800146,"type":1.0516682,"indices":1.0411472,"java":1.0070709,"respond":1.0070496,"map":0.99698144,"value":0.98558146,"##eum":0.98517495,"##art":0.98236704,"##mb":0.97476715,"##p":0.9668406,"values":0.93553585,"##tri":0.9324565,"##ati":0.92558306,"##gon":0.9216539,"poly":0.91677225,"res":0.9026717,"holland":0.90187824,"##rch":0.8855451,"html":0.87860185,"location":0.8698049,"##uis":0.8677819,"netherlands":0.86304826,"print":0.86134654,"request":0.81537676,"properties":0.8076051,"##va":0.78448135,"mill":0.78089035,"amazon":0.77434,"ned":0.7696553,"website":0.7571354,"taken":0.74969256,"mapping":0.7324577,"math":0.7324084,"##rand":0.72006017,"domain":0.7137402,"##hee":0.7135854,"utrecht":0.7105611,"bulk":0.706992,"lines":0.68863124,"features":0.68329114,"algorithm":0.68284494,"find":0.67496765,"requests":0.6648408,"##erland":0.6562014,"points":0.652212,"het":0.6445911,"run":0.64101714,"create":0.6252869,"architecture":0.62520033,"database":0.6227621,"long":0.6199753,"google":0.59851944,"hours":0.59311193,"zoo":0.5744098,"spatial":0.5718346,"_":0.5590516,"id":0.55382365,"boo":0.5421701,"architect":0.53296095,"##ifier":0.5127091,"##lean":0.50818074,"belgium":0.4974696,"data":0.49396202,"site":0.47956464,"zoom":0.47833368,"included":0.46929708,"image":0.4626845,"##ng":0.46192545,"#":0.46110836,"false":0.45912835,"list":0.4561613,"apache":0.44690832,"park":0.4466717,"##16":0.43519577,"scientist":0.43281016,"online":0.41931778,"web":0.41918704,"code":0.4153576,"##word":0.41510734,"line":0.41327563,"network":0.4102008,"brussels":0.4057367,"clients":0.39559114,"smithsonian":0.39276966,"unesco":0.38944706,"re":0.37078243,"example":0.36504078,"name":0.36453876,"indexed":0.36036468,"##ent":0.35992867,"length":0.35895362,"explorer":0.35220486,"inventory":0.35118836,"reaction":0.34980288,"guild":0.34907195,"http":0.34565046,"scale":0.33314887,"shape":0.332878,"centre":0.3308269,"gallery":0.33017445,"rank":0.3285332,"museo":0.32816845,"sc":0.32816416,"types":0.32816306,"time":0.32390478,"##se":0.31284988,"server":0.30415183,"seconds":0.29236382,"(":0.29117733,"africa":0.28852773,"display":0.28719455,"europe":0.2809422,"rotterdam":0.27813974,"survey":0.2755532,"error":0.2742298,"archive":0.2713837,"european":0.26984572,"##22":0.26970252,"antwerp":0.26755723,"*":0.2668319,"add":0.2597152,"node":0.25966546,"geography":0.25518098,"was":0.25264275,"sid":0.24959403,"radar":0.24885742,"art":0.24745527,"##47":0.24724285,"size":0.24194065,"protocol":0.24079518,"pyramid":0.24064675,"scientific":0.22640304,"##21":0.22524133,"had":0.22350454,"maps":0.22321737,"van":0.22135572,"muscle":0.2198246,"3d":0.21649854,"gage":0.20956105,"center":0.20502898,"discovery":0.19904433,"currency":0.19135074,"calculation":0.18753205,"belgian":0.1822916,"located":0.1821234,"prices":0.18122676,"searching":0.17183018,"egypt":0.17116027,"collection":0.16893832,"checkpoint":0.16667701,"albert":0.16635527,"peru":0.16260642,"sort":0.16159078,"gps":0.1611084,"heritage":0.15768592,"precision":0.15727031,"cad":0.15689988,"geographic":0.15492721,"}":0.1522313,"true":0.15079804,"analysis":0.14623585,"popularity":0.14107443,"ur":0.13835415,"architects":0.12894756,"ajax":0.12822321,"wait":0.12339057,"vector":0.12320605,"cost":0.12062032,"garden":0.12060648,"decimal":0.12016089,"market":0.119158134,"resolution":0.11583034,"ocean":0.11472491,"festival":0.114486694,"bug":0.11250495,"##frame":0.10756719,"##ibe":0.107374914,"germany":0.10045244,"curator":0.097616084,"volcano":0.09286929,"bot":0.09005173,"timeline":0.08819077,"ip":0.08805826,"##con":0.0877209,"##um":0.085431464,"years":0.08462056,"running":0.0820999,"halle":0.079774216,"ensemble":0.07873297,"tourism":0.0787138,"catalog":0.07739301,"predict":0.07278834,"elk":0.07084764,"globe":0.065135635,"file":0.06493211,"saw":0.06335435,"##mata":0.05850747,"his":0.058147613,"named":0.057925113,"sonar":0.055332337,"graph":0.05220864,"hunting":0.048902962,"hague":0.047478184,"yard":0.04547629,"fee":0.0452914,"pointed":0.044336546,"forest":0.04197177,"tour":0.040577136,"longest":0.03212981,"world":0.03138344,"examples":0.030566338,"number":0.030507138,"fish":0.027799528,"project":0.027442597,"include":0.026215214,"facts":0.024521379,"cape":0.02308983,"process":0.022959005,"terrain":0.022778293,"oliver":0.022777244,"scope":0.017251668,"explore":0.015717436,"flemish":0.011609376,"hall":0.009492618,"topographic":0.009389054,"generate":0.009133581,"tower":0.0058108685,"key":0.0052617397,"script":0.0033488167}},{"text":"      location: {\n        type: \"geo_point\",\n      },\n      name: {\n        type: \"keyword\",\n      },\n      price: {\n        type: \"long\",\n      },\n      included: {\n        type: \"boolean\",\n      },\n    },\n  },\n});\nconsole.log(response);\n\nconst response1 = await client.bulk({\n  index: \"museums\",\n  refresh: \"true\",\n  operations: [\n    {\n      index: {\n        _id: \"1\",\n      },\n    },\n    {\n      location: \"POINT (4.912350 52.374081)\",\n      name: \"NEMO Science Museum\",\n      price: 1750,\n      included: true,\n    },\n    {\n      index: {\n        _id: \"2\",\n      },\n    },\n    {\n      location: \"POINT (4.901618 52.369219)\",\n      name: \"Museum Het Rembrandthuis\",\n      price: 1500,\n      included: false,\n    },\n    {\n      index: {\n        _id: \"3\",\n      },\n    },\n    {\n      location: \"POINT (4.914722 52.371667)\",\n      name: \"Nederlands Scheepvaartmuseum\",\n      price: 1650,\n      included: true,\n    },\n    {\n      index: {\n        _id: \"4\",\n      },\n    },\n    {\n      location: \"POINT (4.914722 52.371667)\",\n      name: \"Amsterdam Centre for Architecture\",\n      price: 0,\n      included: true,\n    },\n  ],\n});\nconsole.log(response1);\n```\n\n```\nPUT museums\n{\n  \"mappings\": {\n    \"properties\": {\n      \"location\": {\n        \"type\": \"geo_point\"\n      },\n      \"name\": {\n        \"type\": \"keyword\"\n      },\n      \"price\": {\n        \"type\": \"long\"\n      },\n      \"included\": {\n        \"type\": \"boolean\"\n      }\n    }\n  }\n}\n\nPOST museums/_bulk?refresh\n{ \"index\": { \"_id\": \"1\" } }\n{ \"location\": \"POINT (4.912350 52.374081)\", \"name\": \"NEMO Science Museum\",  \"price\": 1750, \"included\": true }\n{ \"index\": { \"_id\": \"2\" } }\n{ \"location\": \"POINT (4.901618 52.369219)\", \"name\": \"Museum Het Rembrandthuis\", \"price\": 1500, \"included\": false }\n{ \"index\": { \"_id\": \"3\" } }\n{ \"location\": \"POINT (4.914722 52.371667)\", \"name\": \"Nederlands Scheepvaartmuseum\", \"price\":1650, \"included\": true }\n{ \"index\": { \"_id\": \"4\" } }\n{ \"location\": \"POINT (4.914722 52.371667)\", \"name\": \"Amsterdam Centre for Architecture\", \"price\":0, \"included\": true }\n```\n\nThe following request searches the index for `location` values that intersect the `13/4207/2692` vector tile.\n\n```\nresp = client.search_mvt(\n    index=\"museums\",\n    field=\"location\",\n    zoom=\"13\",\n    x=\"4207\",\n    y=\"2692\",\n    grid_agg=\"geotile\",\n    grid_precision=2,\n    fields=[\n        \"name\",\n        \"price\"\n    ],\n    query={\n        \"term\": {\n            \"included\": True\n        }\n    },\n    aggs={\n        \"min_price\": {\n            \"min\": {\n                \"field\": \"price\"\n            }\n        },\n        \"max_price\": {\n            \"max\": {\n                \"field\": \"price\"\n            }\n        },\n        \"avg_price\": {\n            \"avg\": {\n                \"field\": \"price\"\n            }\n        }\n    },\n)\nprint(resp)\n```\n\n```\nconst response = await client.searchMvt({\n  index: \"museums\",\n  field: \"location\",\n  zoom: 13,\n  x: 4207,\n  y: 2692,\n  grid_agg: \"geotile\",\n  grid_precision: 2,\n  fields: [\"name\", \"price\"],\n  query: {\n    term: {\n      included: true,\n    },\n  },\n  aggs: {\n","embeddings":{"50":0.04567345,"91":0.38368607,"1500":0.9410308,"1650":0.02300817,"1750":0.9345495,"1770":0.30087265,"point":1.9415057,"await":1.6028668,"amsterdam":1.4965535,"log":1.4684886,"client":1.4445776,"museums":1.4376044,"museum":1.4118171,"##st":1.4053634,"##mo":1.4001383,"geo":1.3909305,"##lean":1.3599545,"price":1.3268598,"bulk":1.2978016,"console":1.2877152,"ne":1.2271991,"index":1.2005845,"dutch":1.1775695,"response":1.1587794,"location":1.1571532,"##word":1.1273344,"awaiting":1.108688,"boo":1.100738,"java":1.0727419,"##hee":1.0600381,"long":1.050704,"##mb":1.0305792,"_":1.0232761,"##resh":0.98041695,"##uis":0.95151716,"mapping":0.9423914,"property":0.90142506,"netherlands":0.898924,"properties":0.89675725,"map":0.88974255,"points":0.86905473,"architecture":0.8625212,"respond":0.8589231,"holland":0.8476171,"}":0.8413724,"type":0.8356231,"##rand":0.82456887,"science":0.80715907,"con":0.8011003,"##mus":0.7924191,"operations":0.78570974,"algorithm":0.7565762,"ref":0.754573,"architect":0.7404985,"het":0.73962164,"key":0.73385745,"math":0.7334482,"server":0.69803315,"##eum":0.69203305,"true":0.690993,"website":0.68123436,"##erland":0.6479875,"##va":0.6474017,"put":0.6409734,"name":0.6403331,"included":0.64029473,"false":0.6375181,"utrecht":0.6357071,"operation":0.60516036,"inventory":0.58515686,"##art":0.5828293,"data":0.5754868,"database":0.57128197,"center":0.5633484,"architects":0.54096407,"clients":0.53190327,"list":0.530294,"centre":0.5301508,"survey":0.5031386,"belgium":0.49922305,"seek":0.49583158,"maps":0.49385306,"zoo":0.45403054,"sonar":0.4534601,"apache":0.4501241,"rotterdam":0.43821377,"##words":0.42782953,"ned":0.41925603,"prices":0.41774788,"currency":0.4101549,"ajax":0.4091343,"question":0.40579042,"html":0.4040997,"gage":0.4037487,"node":0.39294937,"spatial":0.3892173,"api":0.38190085,";":0.38034102,"predict":0.376156,"sid":0.37434837,"web":0.37219068,"rate":0.37216142,"destination":0.36947846,"radar":0.368412,"domain":0.36707753,"rank":0.3578153,"site":0.35723406,"protocol":0.35723132,"market":0.3555254,"european":0.3538367,"search":0.34655192,"shopping":0.34197643,"located":0.33117613,"gallery":0.32709196,"network":0.32486677,"names":0.32320172,"code":0.3196711,"cod":0.30987716,"re":0.30277547,"vector":0.29250923,"geographic":0.29084507,"online":0.28953567,"zoom":0.28299606,"named":0.2827383,"logs":0.28223485,"stock":0.2774618,"guild":0.27161342,"array":0.2691961,"##p":0.26210302,"##50":0.2593765,"restaurant":0.2588468,"hotel":0.25770274,"post":0.25327995,"euro":0.2529329,"mall":0.24951908,"display":0.24664192,"peru":0.2423534,"cost":0.24017939,"interface":0.2390196,"wait":0.23442987,"gps":0.23430331,"include":0.23388356,"panama":0.23281798,"function":0.22857748,"tourism":0.22463074,"geography":0.22410497,"vr":0.21582216,"j":0.21388884,"ip":0.21382733,"brussels":0.20492041,"indonesia":0.2037286,"google":0.20345718,"singapore":0.1993614,"belgian":0.19763412,"park":0.19187947,"unesco":0.18908545,"bin":0.18616426,"building":0.18427284,"analysis":0.17950548,"lot":0.17708226,"types":0.17636389,"cad":0.17489247,"queue":0.17349103,"script":0.1711016,"longest":0.16593608,"scientist":0.15955012,"##mbo":0.15617093,"size":0.15445274,"europe":0.15235446,"egypt":0.14653315,"anticipation":0.13616176,"memory":0.13524073,"sql":0.12947303,"tall":0.12945366,"query":0.12847821,"satellite":0.11833199,"ur":0.11625886,"suriname":0.11513967,"scale":0.114873596,"error":0.11222518,"ocean":0.11100855,"buffer":0.11072057,"amazon":0.10943105,"class":0.10682644,"emergency":0.10466316,"bot":0.10455837,"command":0.10023322,"length":0.09713623,"york":0.09435423,"yard":0.093135305,"pending":0.08833964,"collection":0.084980324,"fee":0.07986656,"calculation":0.07543271,"(":0.07418097,"value":0.07279033,"broker":0.07027898,"eager":0.067962356,"\"":0.06788717,"tour":0.06680314,"cluster":0.0568898,"framework":0.05629005,"city":0.056177583,"zone":0.05594619,"id":0.039079793,"http":0.038765285,"sale":0.03555838,"chess":0.03530295,"alert":0.033173073,"{":0.031978916,"explorer":0.031879965,"keys":0.03073143,"quest":0.02921486,"sc":0.022139767,"festival":0.019271052,"facts":0.01893551,"stuff":0.0149255935,"##23":0.013177921,"albert":0.012505097,"halle":0.011259468,"which":0.01017644,"spanish":0.009156852,"antwerp":0.007997633,"information":0.0038811846,"##uro":0.0036786997}},{"text":"  aggs: {\n    min_price: {\n      min: {\n        field: \"price\",\n      },\n    },\n    max_price: {\n      max: {\n        field: \"price\",\n      },\n    },\n    avg_price: {\n      avg: {\n        field: \"price\",\n      },\n    },\n  },\n});\nconsole.log(response);\n```\n\n```\nGET museums/_mvt/location/13/4207/2692\n{\n  \"grid_agg\": \"geotile\",\n  \"grid_precision\": 2,\n  \"fields\": [\n    \"name\",\n    \"price\"\n  ],\n  \"query\": {\n    \"term\": {\n      \"included\": true\n    }\n  },\n  \"aggs\": {\n    \"min_price\": {\n      \"min\": {\n        \"field\": \"price\"\n      }\n    },\n    \"max_price\": {\n      \"max\": {\n        \"field\": \"price\"\n      }\n    },\n    \"avg_price\": {\n      \"avg\": {\n        \"field\": \"price\"\n      }\n    }\n  }\n}\n```\n\nThe API returns results as a binary vector tile. When decoded into JSON, the tile contains the following data:\n\n```\n{\n  \"hits\": {\n    \"extent\": 4096,\n    \"version\": 2,\n    \"features\": [\n      {\n        \"geometry\": {\n          \"type\": \"Point\",\n          \"coordinates\": [\n            3208,\n            3864\n          ]\n        },\n        \"properties\": {\n          \"_id\": \"1\",\n          \"_index\": \"museums\",\n          \"name\": \"NEMO Science Museum\",\n          \"price\": 1750\n        },\n        \"type\": 1\n      },\n      {\n        \"geometry\": {\n          \"type\": \"Point\",\n          \"coordinates\": [\n            3429,\n            3496\n          ]\n        },\n        \"properties\": {\n          \"_id\": \"3\",\n          \"_index\": \"museums\",\n          \"name\": \"Nederlands Scheepvaartmuseum\",\n          \"price\": 1650\n        },\n        \"type\": 1\n      },\n      {\n        \"geometry\": {\n          \"type\": \"Point\",\n          \"coordinates\": [\n            3429,\n            3496\n          ]\n        },\n        \"properties\": {\n          \"_id\": \"4\",\n          \"_index\": \"museums\",\n          \"name\": \"Amsterdam Centre for Architecture\",\n          \"price\": 0\n        },\n        \"type\": 1\n      }\n    ]\n  },\n  \"aggs\": {\n    \"extent\": 4096,\n    \"version\": 2,\n    \"features\": [\n      {\n        \"geometry\": {\n          \"type\": \"Polygon\",\n          \"coordinates\": [\n            [\n              [\n                3072,\n                3072\n              ],\n              [\n                4096,\n                3072\n              ],\n              [\n                4096,\n                4096\n              ],\n              [\n                3072,\n                4096\n              ],\n              [\n                3072,\n                3072\n              ]\n            ]\n          ]\n        },\n        \"properties\": {\n          \"_count\": 3,\n          \"max_price.value\": 1750.0,\n          \"min_price.value\": 0.0,\n          \"avg_price.value\": 1133.3333333333333\n        },\n        \"type\": 3\n      }\n    ]\n  },\n  \"meta\": {\n    \"extent\": 4096,\n    \"version\": 2,\n    \"features\": [\n      {\n        \"geometry\": {\n          \"type\": \"Polygon\",\n          \"coordinates\": [\n            [\n              [\n                0,\n                0\n              ],\n              [\n                4096,\n                0\n              ],\n              [\n                4096,\n                4096\n              ],\n              [\n                0,\n                4096\n              ],\n              [\n                0,\n                0\n              ]\n            ]\n          ]\n        },\n        \"properties\": {\n          \"_shards.failed\": 0,\n          \"_shards.skipped\": 0,\n          \"_shards.successful\": 1,\n          \"_shards.total\": 1,\n          \"aggregations._count.avg\": 3.0,\n          \"aggregations._count.count\": 1,\n          \"aggregations._count.max\": 3.0,\n          \"aggregations._count.min\": 3.0,\n          \"aggregations._count.sum\": 3.0,\n          \"aggregations.avg_price.avg\": 1133.3333333333333,\n          \"aggregations.avg_price.count\": 1,\n          \"aggregations.avg_price.max\": 1133.3333333333333,\n          \"aggregations.avg_price.min\": 1133.3333333333333,\n          \"aggregations.avg_price.sum\": 1133.3333333333333,\n          \"aggregations.max_price.avg\": 1750.0,\n          \"aggregations.max_price.count\": 1,\n          \"aggregations.max_price.max\": 1750.0,\n          \"aggregations.max_price.min\": 1750.0,\n          \"aggregations.max_price.sum\": 1750.0,\n          \"aggregations.min_price.avg\": 0.0,\n          \"aggregations.min_price.count\": 1,\n","embeddings":{"13":0.17692406,"34":0.84250796,"40":0.20682421,"420":0.65075845,"1650":0.39042318,"ag":1.7231522,"tile":1.656276,"price":1.6456574,"museums":1.6086564,"museum":1.5980294,"##tile":1.5761343,"log":1.5038576,"api":1.4847939,"console":1.438526,"amsterdam":1.3915136,"##gs":1.3615283,"##mo":1.3039583,"grid":1.2849112,"dutch":1.1286218,"tiles":1.1028839,"java":1.0787917,"mv":1.0765277,"point":1.051549,"##g":1.0479566,"_":1.03374,"##son":1.0246916,"##mus":1.0119802,"coordinates":1.0072542,"properties":1.0047684,"min":0.9883878,"property":0.9717704,"precision":0.96839494,"vector":0.96811205,"index":0.9582244,"##hee":0.9535466,"##eum":0.94302243,"ne":0.9372103,"response":0.9152858,"fields":0.90974313,"features":0.9079426,"binary":0.88780403,"prices":0.858084,"map":0.84918016,"max":0.8418945,"holland":0.8416238,"extent":0.83538777,"field":0.81988716,"netherlands":0.81425333,"##t":0.81148666,"science":0.79443777,"math":0.78040516,"geo":0.770196,"av":0.7437943,"}":0.7318191,"##va":0.7244128,"data":0.7022764,"j":0.6956975,"deco":0.68679154,"display":0.6776934,"##art":0.6547504,"website":0.6469269,"algorithm":0.64682525,"location":0.62980497,"zoo":0.60100764,"hits":0.59735996,"inventory":0.591714,"ned":0.57750493,"##erland":0.5774294,"til":0.574733,"geometry":0.557485,"/":0.5461856,"##29":0.54488045,"architecture":0.53939646,"architect":0.53249854,"geometric":0.52464336,"currency":0.52265924,"survey":0.5194704,"market":0.5183072,"cod":0.5034436,"get":0.50295186,"feature":0.48635182,"find":0.48177803,"query":0.47654712,"guild":0.46277788,"list":0.4591171,"result":0.44769862,"hit":0.4369472,"google":0.43296403,"utrecht":0.4287303,"scale":0.42479652,"results":0.423512,"type":0.41912824,"shopping":0.40518406,"logs":0.40348572,"html":0.3982699,"##ga":0.38986546,"gallery":0.38589573,"zoom":0.3830355,"rotterdam":0.37454677,"europe":0.36614648,"peru":0.36073464,"festival":0.35424054,"cost":0.34338236,"apache":0.34254956,"maximum":0.34019932,"european":0.32929388,"auction":0.31951618,"lottery":0.31665367,"online":0.31663463,"popularity":0.312004,"search":0.30838442,"rate":0.30514872,"unesco":0.30032763,"expensive":0.29554778,"mall":0.2952582,"aim":0.2937862,"respond":0.29337922,"rank":0.29280636,"egypt":0.28567943,"spatial":0.27906838,"predict":0.27767143,"site":0.27581382,"belgium":0.27530876,"domain":0.27529272,"tourism":0.26801142,"database":0.25872615,"web":0.25475454,"brussels":0.25303397,"square":0.24906524,"gage":0.24220464,"node":0.22965081,"version":0.22628991,"calculation":0.22602636,"value":0.2174585,"art":0.21479611,"sonar":0.21272098,"gs":0.21238664,"pyramid":0.20569707,"amy":0.2043344,"gps":0.20376915,"fee":0.2031988,"centre":0.19771452,"code":0.19549783,"park":0.19119254,"name":0.19084705,"points":0.18697374,"shape":0.18616061,"coin":0.18582141,"sid":0.18442471,"mining":0.18298498,"reptiles":0.18209209,"interface":0.1819647,"analysis":0.17146681,"##gr":0.16465814,"antwerp":0.16302519,"server":0.16279262,"ip":0.159313,"money":0.15807225,"africa":0.15604122,"script":0.15327929,"cad":0.15310633,"##script":0.15109552,"tour":0.15024139,"radar":0.14563689,"collection":0.1392719,"array":0.13159277,"ajax":0.12952414,"germany":0.12511286,";":0.1242852,"mapping":0.12029789,"##ring":0.1146353,"amazon":0.1128658,"##p":0.10808498,"{":0.10434424,"3d":0.10384515,"euro":0.10158376,"coordinate":0.10111712,"chart":0.09704709,"id":0.09545465,"sale":0.094570614,"sc":0.086613126,"maps":0.075101346,"garden":0.072120085,"##64":0.069656745,"function":0.066028886,"ticket":0.062568225,"center":0.060976636,"question":0.05743269,"included":0.056335345,"error":0.055776753,"indonesia":0.05045947,"london":0.044137303,"direction":0.043905042,"explorer":0.04366018,"longitude":0.042255674,"historical":0.04025806,"mp":0.036338426,"geography":0.03562545,"hotel":0.027875582,"german":0.024493344,"symbol":0.022994306,"accuracy":0.016959755,"stock":0.0059676566,"protocol":0.00033098942}},{"text":"          \"aggregations.min_price.count\": 1,\n          \"aggregations.min_price.max\": 0.0,\n          \"aggregations.min_price.min\": 0.0,\n          \"aggregations.min_price.sum\": 0.0,\n          \"hits.max_score\": 0.0,\n          \"hits.total.relation\": \"eq\",\n          \"hits.total.value\": 3,\n          \"timed_out\": false,\n          \"took\": 2\n        },\n        \"type\": 3\n      }\n    ]\n  }\n}\n```\n","embeddings":{"0":0.86518234,"aggregation":1.9467998,"price":1.6545248,"min":1.496199,"timed":1.4279116,"score":1.2953788,"##q":1.1721494,"count":1.1654289,"sum":1.1640049,"aggregate":1.1252434,"_":1.121377,"}":1.0026131,"hit":0.9897417,"java":0.97388756,"false":0.96909606,"max":0.9411904,"hits":0.9372273,"total":0.83987,"prices":0.8140272,"market":0.76121837,"chart":0.7106482,"value":0.68883765,"take":0.67606884,"stock":0.6555836,"\"":0.6546573,"relation":0.6540498,"table":0.65232134,"analysis":0.64976317,"inventory":0.6213852,"index":0.6196581,"rank":0.6183663,"data":0.5906935,"maximum":0.5845132,"html":0.55981874,"aggregator":0.5579844,"time":0.5313106,"consolidation":0.5248568,"timer":0.5210861,"gage":0.4858651,"mr":0.48309085,"##s":0.47107276,"cox":0.46348172,"algorithm":0.46142086,"math":0.45788386,"popularity":0.44984233,"excel":0.43352526,"column":0.43004972,"database":0.41079116,"took":0.39655605,"relationship":0.377201,"taken":0.36919272,"minute":0.36872402,"timing":0.35095978,"match":0.33723384,"broker":0.33536866,"cad":0.32807788,"scores":0.32770678,"cluster":0.32555544,"indicator":0.32533178,"display":0.3246821,"chess":0.31907082,"predict":0.31728852,"e":0.30984035,"sale":0.29830328,"error":0.29624477,"tab":0.29086173,"type":0.2852583,"bid":0.28113383,"report":0.2769855,"calculation":0.27451393,"sort":0.27383852,"clock":0.27301225,"percent":0.2644613,"accounting":0.25497907,"poker":0.25189847,"else":0.24399148,"measure":0.24366425,"scale":0.23718257,"jan":0.2252719,"strike":0.22413984,"currency":0.21850309,"timeline":0.21112716,"pattern":0.21039121,"rating":0.20025237,"facebook":0.18863295,"sid":0.17814323,"asset":0.16755554,"button":0.16281076,"zero":0.16223633,"dax":0.16180608,"api":0.15907305,"integration":0.15009531,"spike":0.14795896,"sql":0.14596124,"amazon":0.14443766,"now":0.14312108,"popular":0.14156482,"bp":0.13059273,"transaction":0.12947921,"panda":0.1293464,"buffer":0.12682745,"array":0.122493565,"sample":0.122107595,"constant":0.120363526,"burke":0.10269594,"true":0.09722536,"__":0.09516107,"out":0.08824185,"ratio":0.08522524,"rate":0.08355606,"dj":0.0772744,"related":0.058718823,"quantity":0.056580957,"syntax":0.055554286,"website":0.05422399,"bot":0.052537046,"size":0.04995871,"proportion":0.036409695,"acquisition":0.030468864,"combination":0.027022189,"{":0.02636071,"item":0.025566796,"spread":0.024409238,"dow":0.020126758,"execution":0.016179688,"##iq":0.009014031,"cod":0.0056793042,"association":0.002328187}}]}},"root_type":"documentation","ai_subtitle":"Overview of the Vector Tile Search API in Elasticsearch","ai_summary":{"text":"The Vector Tile Search API in Elasticsearch allows users to search for geospatial values within vector tiles, returning results as binary Mapbox vector tiles. The API supports both GET and POST requests, requiring parameters such as target index, field containing geospatial values, zoom level, and coordinates (x, y). Users must be familiar with the Mapbox vector tile specification and have the necessary index privileges if security features are enabled. The API translates requests into geo-bounding box queries and grid aggregations, returning layers for hits, aggregations, and metadata. The API also includes various query and request body parameters for customization, such as grid aggregation type and precision. Examples demonstrate how to create indices, add geospatial data, and perform searches using the API.","inference":{"inference_id":".elser-2-elasticsearch","model_settings":{"task_type":"sparse_embedding"},"chunks":[{"text":"The Vector Tile Search API in Elasticsearch allows users to search for geospatial values within vector tiles, returning results as binary Mapbox vector tiles. The API supports both GET and POST requests, requiring parameters such as target index, field containing geospatial values, zoom level, and coordinates (x, y). Users must be familiar with the Mapbox vector tile specification and have the necessary index privileges if security features are enabled. The API translates requests into geo-bounding box queries and grid aggregations, returning layers for hits, aggregations, and metadata. The API also includes various query and request body parameters for customization, such as grid aggregation type and precision. Examples demonstrate how to create indices, add geospatial data, and perform searches using the API.","embeddings":{"vector":2.1123145,"elastic":1.943219,"tile":1.9188644,"api":1.755537,"##sea":1.6057715,"zoom":1.5067705,"map":1.459223,"##box":1.4458321,"tiles":1.4079653,"search":1.397306,"geo":1.3024626,"grid":1.2711864,"##rch":1.2113417,"post":1.1815857,"binary":1.1775513,"index":1.1659493,"box":1.1539015,"get":1.1526186,"target":1.1505414,"##sp":1.1271183,"aggregation":1.1257192,"bound":1.0935111,"##ati":1.0133785,"parameters":0.98455924,"y":0.9437044,"precision":0.92365134,"privileges":0.9162253,"coordinates":0.86642534,"request":0.8435013,"translate":0.8159905,"amazon":0.8114235,"til":0.8064717,"indices":0.7973547,"algorithm":0.76463306,"data":0.7396297,"requests":0.73389465,"value":0.72011983,"user":0.70670295,"java":0.7014132,"maps":0.69775236,"geometric":0.65691566,"values":0.6315187,"layers":0.62871605,"spatial":0.60605174,"que":0.6056361,"vectors":0.602437,"apache":0.5988465,"platform":0.59809476,"find":0.59209985,"custom":0.5891701,"hit":0.569343,"field":0.55784845,"square":0.55618286,"##ries":0.5510799,"privilege":0.5310122,"translation":0.52379143,"security":0.50176096,"software":0.50000125,"terrain":0.49026224,"familiar":0.48638773,"features":0.47562337,"layer":0.474684,"website":0.4624983,"mosaic":0.45952174,"gps":0.45383394,"searching":0.45224163,"is":0.44944966,"survey":0.43384892,"web":0.425014,"results":0.42465824,"level":0.42087132,"tool":0.41238734,"query":0.41225836,"x":0.3977179,"mapping":0.3832799,"database":0.3705634,"coordinate":0.36846724,"create":0.36639193,"metadata":0.36419785,"interface":0.3550105,"specification":0.34441036,"bot":0.34305435,"explorer":0.3377837,"cad":0.32796574,"client":0.32536998,"parameter":0.3241174,"legacy":0.31206822,"hits":0.3116467,"math":0.29419374,"inventory":0.28691176,"hunt":0.2761601,"forest":0.26439962,"hunting":0.2618137,"mining":0.2583167,"fields":0.2569577,"result":0.2555005,"sea":0.2547114,"##ing":0.25443378,"scope":0.25127482,"online":0.24766915,"analysis":0.24263532,"http":0.2294848,"aggregate":0.22704285,"targeted":0.21906918,"research":0.20807168,"google":0.20625056,"explore":0.19864371,"rights":0.19563538,"domain":0.19177409,"translating":0.18951212,"network":0.18795088,"boxes":0.18673936,"board":0.18538377,"knowledge":0.18467917,"test":0.18274947,"body":0.17996742,"targeting":0.17695633,"radar":0.1757377,"retrieval":0.17523319,"framework":0.16828409,"method":0.15896325,"useful":0.15469511,"returned":0.15244648,"add":0.14288664,"comply":0.13126089,"geography":0.13063206,"application":0.1269123,"mat":0.12635343,"sid":0.12172115,"server":0.11319542,"editor":0.1094459,"sonar":0.10515809,"translates":0.10380206,"searches":0.10303733,"binding":0.100002095,"tab":0.08558074,"powers":0.08414309,"camera":0.082362324,"access":0.07924872,"archive":0.07694574,"integration":0.075109966,"squares":0.06938763,"retrieve":0.06774281,"sort":0.067425154,"secure":0.06714664,"ocean":0.06695556,"translator":0.06678307,"quest":0.05943721,"geographic":0.057285458,"indexed":0.052012313,"node":0.05146002,"muscle":0.05131711,"cod":0.040752374,"tree":0.037862144,"file":0.037823234,"support":0.03749237,"zip":0.025146645,"html":0.024894468,"marble":0.007656159}}]}},"ai_tags":["Vector Tile","Geospatial","Elasticsearch","API","Mapbox"],"product_name":"elasticsearch","version":"8.17","slug":"guide-en-elasticsearch-reference-search-vector-tile-api.html","url":"https://www.elastic.co/guide/en/elasticsearch/reference/8.17/search-vector-tile-api.html","ai_questions_answered":{"text":["What is the Vector Tile Search API?","How does the Vector Tile Search API work?","What parameters are required for the Vector Tile Search API?","What are the prerequisites for using the Vector Tile Search API?","What types of requests can be made with the Vector Tile Search API?","What is the response format of the Vector Tile Search API?"],"inference":{"inference_id":".elser-2-elasticsearch","model_settings":{"task_type":"sparse_embedding"},"chunks":[{"text":"What is the Vector Tile Search API?","embeddings":{"vector":2.746515,"tile":2.4558463,"api":2.4511437,"search":1.8948377,"tiles":1.4425589,"index":0.9734564,"find":0.9558534,"algorithm":0.93732536,"is":0.9313676,"java":0.84545565,"platform":0.84148276,"map":0.7205147,"software":0.6969995,"website":0.61148405,"cad":0.5883867,"mosaic":0.50824785,"tool":0.50295764,"display":0.4956615,"hardware":0.45525247,"til":0.44926918,"geometric":0.43535152,"mat":0.41550842,"3d":0.40198746,"bot":0.3823084,"square":0.37764707,"online":0.3765245,"math":0.3728223,"interface":0.3648155,"technology":0.36245748,"test":0.33452305,"web":0.32689548,"spatial":0.30385092,"google":0.24055538,"inventory":0.22914301,"cube":0.22129285,"called":0.19486281,"illustrator":0.19230928,"node":0.18166523,"graphic":0.1813076,"framework":0.16414477,"scala":0.16344781,"pattern":0.15485084,"symbol":0.15047094,"pad":0.12366618,"chart":0.11181358,"catalog":0.080986105,"sid":0.06873579,"metro":0.06558297,"term":0.063646,"layout":0.05587382,"explore":0.05296914,"image":0.05112446,"direction":0.04922406,"application":0.046561603,"sonar":0.04441603,"alt":0.0438634,"tab":0.030075986,"project":0.019618519,"design":0.015457822,"robot":0.014342318,"network":0.009972865,"keyboard":0.0067129806}},{"text":"How does the Vector Tile Search API work?","embeddings":{"vector":2.6340744,"tile":2.407361,"api":2.3435614,"search":1.9621956,"tiles":1.3567652,"work":1.1735022,"java":1.0244913,"algorithm":1.0232147,"index":0.99301195,"platform":0.97167134,"find":0.9637734,"interface":0.7517382,"map":0.7108408,"working":0.69470525,"display":0.68229574,"function":0.51628244,"cad":0.51200145,"website":0.48131365,"method":0.4735549,"tool":0.45306993,"bot":0.44959614,"operation":0.43032774,"protocol":0.4296541,"google":0.42300174,"mechanism":0.41521806,"math":0.3973353,"hardware":0.37939662,"works":0.35175422,"inventory":0.34384042,"online":0.32322088,"mat":0.3214609,"editor":0.31653953,"til":0.30920914,"square":0.29520887,"software":0.28065592,"layout":0.2749849,"geometric":0.26442698,"tab":0.26338002,"test":0.26129323,"node":0.25741857,"computer":0.24300544,"spatial":0.23877403,"sid":0.21449794,"3d":0.21401069,"useful":0.21265526,"sha":0.20242828,"direction":0.19675745,"network":0.18771565,"mosaic":0.17199019,"pad":0.17014031,"explorer":0.1639144,"legacy":0.1516817,"symbol":0.14314392,"server":0.1388691,"database":0.13734226,"edge":0.12940097,"client":0.12848575,"pattern":0.12806381,"mapping":0.1271586,"data":0.1205863,"navigation":0.114769764,"mode":0.108875796,"web":0.105329774,"checkpoint":0.10320615,"keyboard":0.10258535,"html":0.09169663,"sonar":0.07699099,"grid":0.07490913,"control":0.06503879,"process":0.056138813,"cube":0.0490032,"technology":0.04810778,"scala":0.046255015,"chart":0.038554143,"user":0.032814827,"target":0.031611234,"alt":0.028244643,"catalog":0.025352966,"graphic":0.01198543,"global":0.009858491,"broker":0.0074822423}},{"text":"What parameters are required for the Vector Tile Search API?","embeddings":{"vector":2.2421691,"tile":2.0862648,"api":1.929196,"parameters":1.9250526,"parameter":1.6409615,"search":1.5037982,"tiles":1.0940526,"algorithm":1.0511658,"java":1.0309446,"index":0.8611196,"required":0.8255073,"requirements":0.7955465,"cad":0.63265216,"find":0.6112737,"display":0.6091686,"require":0.59454864,"math":0.56259537,"requirement":0.5442438,"map":0.5300552,"necessary":0.51591164,"mandatory":0.5055156,"til":0.491723,"need":0.4810538,"hardware":0.4775049,"custom":0.44623232,"geometric":0.43022835,"platform":0.40019748,"interface":0.39841715,"mat":0.38906938,"precision":0.3251772,"minimum":0.30697206,"apache":0.3037779,"layout":0.2951123,"certification":0.2898873,"bot":0.28607085,"google":0.2824173,"3d":0.28190395,"database":0.27020872,"mosaic":0.25832903,"chart":0.24486709,"sha":0.24271491,"editor":0.21917833,"tutor":0.21433161,"analysis":0.20651677,"characteristics":0.1954342,"test":0.19378556,"sid":0.1917363,"software":0.17890948,"predict":0.1580406,"prototype":0.14864779,"tool":0.14718643,"html":0.14706346,"recommended":0.13310494,"ut":0.121492825,"matrix":0.12131376,"inventory":0.11895494,"data":0.11616387,"architect":0.11171583,"scala":0.110073775,"pattern":0.09780917,"profile":0.08289727,"zoom":0.07025842,"legacy":0.06787147,"website":0.06569539,"global":0.053794924,"gage":0.047171194,"checkpoint":0.04512801,"client":0.03934882,"edge":0.038516637,"image":0.038027987,"calculation":0.029741043,"node":0.019644117,"keyboard":0.017868966,"z":0.010981009,"valid":0.006531913,"method":0.005880674,"user":0.0048570503,"percent":0.0046004173,"chess":0.001962047}},{"text":"What are the prerequisites for using the Vector Tile Search API?","embeddings":{"vector":2.2533374,"tile":2.125698,"api":1.9821929,"##quisite":1.6307722,"search":1.5858669,"java":1.1101515,"tiles":1.0272585,"pre":1.0190939,"algorithm":0.87673694,"index":0.86898,"##re":0.8253268,"requirements":0.7898,"cad":0.7761933,"find":0.7472187,"minimum":0.74072236,"tutor":0.7145366,"certification":0.6501149,"map":0.61628324,"platform":0.5817472,"display":0.5644106,"math":0.539872,"essential":0.5309427,"need":0.50507224,"requirement":0.47261575,"online":0.4597278,"mat":0.4565199,"necessary":0.42331654,"implement":0.41274536,"tool":0.409207,"interface":0.40417475,"google":0.39500362,"layout":0.38592944,"tab":0.37440497,"3d":0.37317434,"software":0.36896837,"inventory":0.36438814,"using":0.36249822,"qualification":0.33550623,"bot":0.3264048,"hardware":0.32618347,"learning":0.32352453,"checkpoint":0.3213289,"website":0.3040731,"step":0.29709345,"til":0.29415733,"editor":0.29091403,"download":0.28281477,"exam":0.28242424,"architect":0.25475797,"legacy":0.24835837,"know":0.24159074,"square":0.2403982,"mosaic":0.23526368,"apache":0.22335276,"client":0.22316654,"training":0.21979629,"test":0.19794448,"prototype":0.18711422,"design":0.18104325,"application":0.18081823,"html":0.17405303,"project":0.15020119,"lab":0.13313426,"manual":0.13066146,"explore":0.11835953,"chart":0.116983645,"chess":0.10331861,"geometric":0.09680516,"framework":0.096050434,"user":0.09245073,"registration":0.0910115,"excel":0.088346735,"education":0.08482701,"selection":0.07768678,"criteria":0.07561167,"version":0.07468115,"database":0.07202857,"explorer":0.06107499,"web":0.044218283,"method":0.0418267,"mini":0.040556073,"what":0.03742864,"create":0.03431328,"zoom":0.029730167,"license":0.029487362,"guild":0.0034433855,"required":0.0022141247}},{"text":"What types of requests can be made with the Vector Tile Search API?","embeddings":{"vector":1.9947703,"tile":1.9569756,"api":1.7934515,"search":1.4461373,"request":1.4441504,"requests":1.0016855,"type":0.9251586,"types":0.9215687,"java":0.9063989,"index":0.8237103,"tiles":0.81686395,"algorithm":0.78927296,"made":0.56572646,"find":0.5523658,"bot":0.5491889,"cad":0.53690696,"map":0.52784556,"proposal":0.511872,"platform":0.50008535,"math":0.49830285,"list":0.49230725,"can":0.48836923,"display":0.44680882,"mosaic":0.35541296,"geometric":0.3421121,"web":0.3410032,"website":0.32487127,"tool":0.32146844,"online":0.30524492,"these":0.2940944,"interface":0.290834,"possible":0.27845192,"class":0.27014658,"available":0.2691633,"tab":0.26736528,"html":0.26693243,"make":0.2625621,"http":0.23949108,"data":0.23464617,"sort":0.22336277,"3d":0.2198892,"application":0.21285126,"node":0.19347742,"inventory":0.19286884,"quest":0.18717967,"hardware":0.1870559,"mat":0.1818215,"google":0.16812752,"software":0.15864481,"category":0.15634468,"pattern":0.14917308,"method":0.13865909,"cube":0.1369571,"client":0.12688352,"create":0.10995321,"array":0.103307426,"test":0.09361567,"catalog":0.087068446,"legacy":0.08646674,"sid":0.084639184,"square":0.08372963,"selection":0.07332023,"database":0.062669,"apache":0.055034634,"challenge":0.05003491,"explore":0.0300488,"til":0.025227085,"navigation":0.016596237,"ask":0.016520375,"robot":0.0098019475,"chart":0.009777394,"server":0.008868473,"tutor":0.00038020534}},{"text":"What is the response format of the Vector Tile Search API?","embeddings":{"vector":2.1353202,"tile":2.1241906,"response":2.0932403,"format":2.041757,"api":1.9239141,"search":1.545413,"respond":1.4776303,"tiles":1.0185863,"reaction":0.9816155,"algorithm":0.9289073,"index":0.80151415,"java":0.7834679,"display":0.66689074,"map":0.6339538,"pattern":0.613874,"find":0.5938451,"file":0.5855074,"platform":0.56332576,"html":0.5526784,"code":0.51484317,"google":0.49059007,"cad":0.4580267,"chart":0.44590342,"symbol":0.44041634,"grid":0.41927248,"math":0.40727744,"sid":0.39650232,"version":0.34251842,"interface":0.33045462,"data":0.31778663,"mat":0.31065887,"website":0.28410867,"array":0.28025374,"formats":0.27009562,"test":0.26563293,"database":0.26265752,"inventory":0.25649607,"mosaic":0.25057992,"match":0.24798743,"standard":0.20702484,"font":0.20531464,"bot":0.20459315,"geometric":0.19127928,"string":0.18788381,"graphic":0.17720379,"layout":0.17087282,"tool":0.15867461,"size":0.15513965,"representation":0.15321557,"field":0.14951928,"protocol":0.14846046,"text":0.1430096,"notation":0.12698264,"matrix":0.12658024,"sha":0.11201962,"image":0.10173764,"address":0.093602315,"cube":0.08704594,"q":0.0854574,"rank":0.081177376,"til":0.07855214,"result":0.07021942,"square":0.068627276,"quest":0.06745368,"decimal":0.05732598,"keyboard":0.049955875,"serial":0.048959043,"legacy":0.032499842,"target":0.03183516,"application":0.024692008,"apache":0.016066726,"archive":0.014273219,"alphabet":0.01399983,"sonar":0.013356261,"gage":0.01314545,"alexa":0.006289095,"metro":0.0041550975}}]}}}
